#include <Siv3D.hpp> // OpenSiv3D v0.4.3
#include <algorithm>
#include <ctime>
#include <cmath>
#include <tuple>
#include <string>
#include <omp.h>
using namespace std;
#pragma warning (disable: 4996)

struct State {
	char c[8][8];
	unsigned short bit1[8], bit2[8], bit3[15], bit4[15];
};

// 機械学習の変数
const int STAGE1 = 128;
const int STAGE2 = 24;
const int STAGE3 = 8;
const int STAGE4 = 2;
double d1[150][150] = {
	{-0.6728553,0.2117854,-0.0156288,-0.1826937,-9.6261806,0.8397469,-0.8716741,0.1008760,-0.5116664,0.2423858,0.9296740,-0.0186198,0.4316667,0.3524777,0.6759890,-0.2005176,-0.5971518,0.0133174,1.1986463,-0.4651976,-0.8728758,-1.2159145,-0.0094195,-0.7400110},
	{-0.4276929,0.2803553,-0.5966654,-0.0220818,0.7905587,1.0781770,-0.2689931,0.2368048,0.0617561,-0.2288985,-0.0839673,0.4329724,-0.0428322,0.6397229,0.1542281,0.4294136,0.1494790,-0.1757539,0.9585451,0.1374533,-0.5362444,-1.7460717,0.7182992,0.4577097},
	{-0.3194858,-0.0455627,-0.0869787,0.1522654,-0.1693567,0.1089943,0.0888122,-0.1338180,0.1265262,-0.6401442,-0.3479881,0.0721476,-0.1366567,-0.2773764,0.0499770,0.4375776,0.0961971,-0.3877198,-0.1385805,-0.3930167,-0.2227756,-1.1337314,-0.0257444,0.7905764},
	{0.2882627,0.3954928,-0.2789582,-0.1061748,-0.1768742,0.2311816,-0.3248247,0.0233886,0.0979360,-0.3863360,0.1787077,-0.2205880,0.9143378,-0.0852487,-0.1376606,0.3249899,0.0702108,-0.2153804,-0.2247958,0.6818450,0.4620634,-0.5990996,-0.2648264,0.3280593},
	{-0.2863584,-0.1792494,-0.2584093,-0.0210290,0.1094736,-0.5056981,0.0808159,-0.2434261,-0.2266597,-0.1840214,0.1809592,0.0823205,-0.5722654,0.0635149,-0.1593937,0.3455472,-0.0455349,-0.0628961,0.3608437,-0.6175290,-0.2030422,-0.0320963,-0.0398308,0.4371921},
	{-0.0826725,0.1724144,-0.3431554,-0.1801425,-0.0162318,-0.1398590,0.3186396,-0.1315831,0.1072691,-0.7073497,-0.6711051,1.1174620,-0.2424173,0.1321720,0.5436990,0.3727782,0.0922056,-0.0887416,-0.0153834,-0.4320311,-0.5014240,-0.5788466,-0.0653046,0.1288022},
	{0.5630602,0.3427931,-0.4342124,-0.3611199,-0.1922681,-0.4613811,0.0839652,0.4171357,-0.1083233,-1.0532506,0.1624012,-0.4520176,0.1004074,-0.0170704,-0.6107564,0.0814154,0.5860095,0.1990914,-0.4699384,0.2637734,-0.9974135,-0.4958618,-0.0353278,1.0550729},
	{-5.4614186,-0.0598932,-0.5793075,-0.2712471,-0.7808034,-0.7189376,-0.0227935,0.5164016,-0.4827497,-0.3045015,-0.2830232,2.4450197,-0.2515393,-0.2459207,0.4381392,-0.2921004,-0.1646451,1.0263310,-1.5102760,-0.0661050,-0.5967524,-0.0244526,-0.1482459,-1.2711369},
	{-0.0894106,-0.6007299,-0.4911898,0.1668583,1.1808407,1.2783123,-0.6791531,0.4923287,0.3966140,-0.1223432,1.0460256,0.4417593,0.2896823,0.1884884,-0.6121643,0.3689135,-0.2173495,0.2967193,0.5844529,0.3482251,-0.1500729,-1.6931140,0.6826249,-0.0572906},
	{0.1488024,0.1880059,-0.0022591,-0.2669894,3.0566249,0.4562343,-0.2568050,0.3300059,-0.4362053,-0.3495553,-0.0189665,-0.6250410,-0.1331495,0.1183843,-0.3054370,-0.3829337,0.6810820,0.1944961,0.6270699,0.0162289,-1.0033054,-1.2420652,0.5206138,-0.0461222},
	{0.1699576,-0.2749518,-0.5756206,0.1162219,0.2612206,0.5817683,0.0888261,-0.5012614,0.0101576,-0.6610534,0.0628473,0.1326446,0.0993641,0.0895012,0.1914808,0.3199343,0.1034626,0.0322115,-0.0724547,-0.1200099,1.3253460,-0.3354572,0.3622434,0.1201697},
	{0.0928365,0.2206441,-0.3302341,0.0523799,0.3095346,0.1189526,-0.1556248,-0.0028257,0.0956146,-0.1071155,0.2114936,0.1682471,-0.1519357,0.3952931,-0.2134856,0.8859199,0.2483680,-0.1033391,0.0556396,0.1948881,0.0912286,0.0718038,0.0370979,0.1314530},
	{0.1606655,0.0130716,-0.1361248,0.0060539,0.2612839,-0.1470944,-0.0701947,-0.1878170,0.0397475,-0.1542183,0.1582533,-0.4679326,0.0672839,0.1044785,-0.3298436,0.3443324,-0.0102600,0.3938310,-0.3095054,-0.1228849,0.1340900,0.4356339,-0.4260033,0.5010561},
	{0.2407779,-0.2516320,-0.1805306,-0.1018076,-0.0011554,-0.7215633,-0.1632829,-0.4813053,0.4139587,-0.3058145,-0.1949610,0.3419670,-0.1609910,-0.1957091,0.0262271,0.3496757,-0.0610647,0.2198408,0.0451268,-0.0837921,-0.1610796,0.1696378,-0.6917295,0.9704161},
	{1.8634801,0.5193462,-0.7103739,-0.5665507,0.4376441,-0.4178798,-0.4146030,0.0024351,0.0938497,-0.6157638,0.0550586,-0.2421269,-0.0778706,0.0194933,0.3084896,-0.0105345,0.3686643,0.7400050,-0.5780146,-0.3372884,-0.1754368,-0.3027477,0.4133158,0.1067656},
	{0.6020648,-0.4922045,-0.4369537,-0.1429283,0.2548966,-0.6054745,-0.3280972,-0.2602280,-0.5256372,-0.9504988,0.2667477,0.3662832,-0.0356910,0.2796525,-0.5121438,-0.7539943,0.0359383,0.7758393,-0.7345712,-0.2981078,-0.8876820,-0.2503904,-0.3631097,1.1861165},
	{0.0039313,-0.1334436,0.3843689,-0.3279592,-0.2230674,1.4185894,0.3843381,0.3841005,-0.4845643,-0.2235189,0.2652692,-0.3748647,-0.0669625,0.0841048,0.5347716,-0.0600845,-0.1506408,0.5000876,0.0331948,0.1502406,0.8138941,-0.8943234,1.0520712,-0.1180225},
	{0.0202363,-0.3291248,-0.0035004,0.1123537,0.2340892,0.7025630,-0.3301677,0.1261539,0.0615964,0.0437748,-0.2525829,-0.1319926,-0.0209712,0.0813205,-0.2920912,0.0320934,0.1384809,-0.0302409,-0.0910594,-0.1331578,1.6977544,-0.5714655,0.1744191,0.5016757},
	{0.0565568,0.2659544,-0.3325884,0.4216318,0.0614270,-0.2613363,-0.0531015,-0.4188433,0.1963249,-0.3374476,-0.1970829,0.0847888,-0.2760968,0.5715793,0.1505178,0.3654352,0.0741421,-0.0192578,-0.4249722,0.2146994,0.6129705,0.0406937,-0.1393260,0.3087188},
	{-0.0895054,-0.0584972,-0.4685183,0.3522695,0.0034266,-0.1568303,0.1032588,-0.5212113,0.0830241,-0.1530515,0.0570677,-0.4905563,0.4862946,0.3682673,-0.0001505,0.6426947,0.1078555,0.1658246,0.1267005,0.0830384,0.4670966,0.3839236,0.4705723,0.1041367},
	{0.3433266,0.1832540,-0.2556916,0.0702328,0.0848217,0.3639876,-0.0157564,-0.5555655,-0.0075855,-0.3417354,0.7272522,0.2029056,0.1326211,-0.2046173,-0.4004167,0.4887605,0.1793523,-0.0924091,0.0761818,0.0706137,-0.2399567,0.2531728,-0.1838112,0.1565060},
	{-0.0736123,-0.3794787,0.0603466,0.1576132,0.2371456,0.0301564,0.1281958,-0.7277885,-0.1201386,-0.0347054,0.0731160,-0.0125788,-0.2977122,0.1109663,-0.4322853,0.2858206,0.0181365,0.1956650,-0.4781001,-0.0628080,-0.2974908,-0.0752873,-0.8152494,0.6668646},
	{0.3377569,-0.0042151,0.0473085,-0.3356712,0.1330166,-0.2189690,-0.1661293,-0.1725661,0.0616622,-0.0268160,0.5338519,-0.0984360,-0.3092401,0.0420837,0.1291798,0.4641209,0.1457274,0.4423672,-0.8747343,0.2776305,0.0731939,0.3570549,-0.5620485,0.7427340},
	{-0.2663823,0.2139922,0.5410489,-0.2827170,-0.0062373,-0.2364091,0.0066801,0.1993292,-0.0359490,-0.0115967,0.1308463,0.0521984,-1.3259970,0.4379850,-0.3749671,-0.1294854,-0.2533670,0.3569291,-0.4894594,-0.0710309,-0.2592174,-0.1054763,-0.6579955,0.8814882},
	{0.1256349,-0.5630184,-0.3652793,0.0276649,-0.1485148,0.3741698,0.0068123,-0.3027002,0.2819764,0.0188254,0.3923688,0.4189006,0.1810326,0.1037094,-0.1890193,0.5679417,-0.0456106,-0.5068983,0.1018449,-0.2056679,0.7863379,-0.3319188,1.0770943,0.1778990},
	{0.0688954,-0.0272748,-0.4078828,0.3359908,0.3275575,0.6524068,-0.2259671,-0.3523043,0.1436526,-0.0303336,0.0197853,-0.2339748,0.2461400,0.6362703,0.0934420,0.5499952,0.0666394,-0.1287863,0.3032752,-0.1272862,1.2247152,-0.0163637,0.6255585,0.0706426},
	{-0.1197944,0.1337978,0.0012240,0.0498967,-0.0634112,0.2732111,-0.1612520,-0.5640871,-0.0535131,-0.1399999,0.1746535,0.2587703,-0.0599670,0.1866030,0.3754183,0.6973296,0.1105025,0.0687169,0.3241610,-0.1590077,0.6824527,0.3051261,0.4731602,0.0587915},
	{-0.3130229,-0.1905921,0.0217604,0.4760548,-0.1202940,-0.1319329,0.1764790,-0.6369231,-0.1193859,-0.0357989,-0.2159576,-0.0940830,0.2843013,0.5206974,-0.0372023,-0.0470441,-0.0398800,0.1586205,-0.3535153,0.0494219,0.1059368,0.3256844,0.1980293,0.0350372},
	{-0.0341634,0.0555465,0.0156222,0.3271178,-0.0323680,-0.2675840,-0.0830330,-0.8323895,-0.2220986,0.0651077,-0.0584755,-0.2449198,0.4909565,0.4496423,0.0476565,0.0900253,-0.0450679,0.0206114,-0.0998287,-0.0367902,0.0409967,0.5776512,0.0380361,0.2194318},
	{0.4591977,0.1758248,-0.4500439,0.4046295,-0.1690227,0.0595053,0.4620159,-0.7618673,0.3763427,-0.2102815,0.4822721,0.2295480,0.7219505,0.2416070,-0.0458074,0.0026842,-0.0742818,0.0528394,-0.3454289,0.3034269,-0.0019508,0.4260161,-0.6651589,0.1233797},
	{0.0510797,-0.2356413,0.4835094,0.1643771,0.0976157,0.0520423,-0.0558280,-0.4027697,0.1040697,-0.1724262,0.1680760,-0.1591932,0.7873933,0.0436735,0.1943824,-0.0451571,0.2068510,-0.2137225,-0.3092459,-0.3646647,-0.2020322,0.2403613,-0.6789949,0.5020286},
	{-0.1627700,-0.0814061,0.2010305,-0.3898391,0.0316449,-0.3987369,-0.1284644,-0.0849062,0.1510715,0.2136962,-0.1024875,-0.2843149,-0.7460833,0.2424853,-0.8062136,0.0999141,-0.0416436,-0.0482322,-0.0254104,-0.1011948,-0.5204675,-0.0616488,-0.3257521,0.2124063},
	{-0.2524669,-0.0078627,0.0614884,-0.2360974,-0.0741538,0.3510576,-0.0199437,0.0984123,0.1463676,0.2818606,0.2824472,0.2985724,0.1335359,-0.3674059,0.0562455,-0.1879235,0.1213717,0.4761966,0.1114325,0.4465426,0.1081441,-0.1041611,1.2612334,0.0368228},
	{0.0355798,0.0287313,0.3714486,-0.1128047,0.3109882,-0.4839352,-0.0432351,-0.0891969,-0.1427979,0.2687261,-0.6714507,0.1034673,-0.1901747,0.0670197,-0.0142955,-0.1559324,0.0443786,0.0883865,0.3656865,0.0794755,0.2039819,0.1208566,0.5300928,0.1230117},
	{-0.0948697,0.4563181,0.3802356,0.3278802,0.1625928,0.2381964,-0.6410657,-0.6373047,-0.0192744,0.4805861,0.2379691,0.6111479,0.3003500,0.0743318,-0.5541048,0.4465738,0.1277750,0.2939841,-0.1493057,0.0931060,0.5309797,0.3706811,0.0993701,0.1207271},
	{0.0133647,-0.0968978,0.1048853,0.2830594,-0.0231346,-0.2249658,0.0125818,-0.6835121,-0.1582068,-0.0087862,-0.4006491,-0.1272787,0.4787684,0.6384677,-0.0539196,0.0707142,0.0521428,-0.1252247,-0.2398059,-0.1522535,0.1965552,0.5064566,0.2579977,-0.0378947},
	{-0.0467612,-0.0943405,0.1508956,0.5407406,0.1007538,-0.2462289,0.0286714,-0.6754342,-0.0460163,-0.0692861,-0.2527104,0.1842704,0.7357060,0.4585268,0.1336949,-0.0753356,-0.0298388,-0.0690099,-0.1337864,-0.2474468,0.0946657,0.4497102,0.0015542,-0.1186690},
	{-0.4186137,-0.0397013,0.7649015,0.1343363,0.1940129,-0.2753535,0.0662781,-0.7756431,0.1484660,0.5602971,0.2695416,-0.0456028,0.4192317,0.3456553,-0.4268209,-0.1140519,-0.0327474,0.2771193,-0.3278989,0.0111227,-0.5048178,0.3118336,-0.7434154,0.3107539},
	{0.0962867,0.0657750,0.3238124,-0.0363223,0.2367694,-0.1741720,-0.3726190,-0.4086675,-0.1456038,-0.0666439,-0.1167675,0.3059133,0.3185183,0.2440819,0.2263434,-0.1857648,0.1627410,0.3061312,-0.8656297,-0.2630578,-0.4845818,0.0534352,-0.3289543,0.3649931},
	{0.0908532,0.3714136,-0.2851692,-0.4941798,0.0946508,-0.1028581,0.1881006,-0.1046986,-0.1418674,-0.1351446,-0.0780649,-0.0016046,-0.6710878,0.0249134,-0.4574587,-0.6531286,-0.0975323,0.0093629,-0.6360604,-0.0615278,0.0510141,0.2397184,0.0845681,0.4236027},
	{0.0483015,0.2603337,0.0441785,0.1656412,-0.0416284,0.3352390,-0.3297235,-0.2091208,0.0466875,0.1057987,0.2578863,-0.2486157,-0.1348136,-0.6110641,0.5571895,0.2577359,-0.0415500,0.2082573,-0.1435423,-0.2049880,0.3975113,-0.0841896,0.7730710,0.2142485},
	{0.0862614,-0.1750205,0.2055460,-0.0731386,0.0284804,-0.2398712,-0.2922136,-0.1352743,-0.1855523,0.3160348,-0.1904009,0.1510271,0.3998432,-1.2447605,0.3645239,0.1654799,0.1577593,0.3057830,-0.1093120,0.2460322,1.1625625,0.0250218,0.2746202,0.1309044},
	{0.0018690,0.0209718,0.1452821,0.3092802,0.0070789,-0.0404659,-0.2782777,-0.6076837,-0.1214560,-0.1074364,-0.3192890,-1.1077955,0.1262406,0.1374236,0.1163516,0.0113600,0.0032744,-0.2796337,-0.6497313,-0.1878216,0.9092110,0.0802965,0.4472200,-0.5228198},
	{-0.1739091,-0.2603787,0.5017309,0.2198508,-0.0616906,-0.5040622,-0.1552088,-0.6771173,0.2274251,0.3426349,0.0236991,0.0449364,0.0678417,0.4710302,-0.3157566,-0.6387794,0.0807423,-0.1646442,-0.1091054,0.4574594,-0.2117780,0.5803546,0.0727783,-0.2506598},
	{0.0290698,-0.3262337,0.5347641,0.1143254,0.1614463,-0.1743351,-0.2121315,-0.8066669,-0.1665615,-0.1053039,-0.0658885,-0.1455587,0.2673310,0.5962810,0.4628651,0.0354220,0.1615347,-0.0595661,-0.2440458,-0.2774269,0.0515367,0.5636442,-0.1280260,0.0348632},
	{0.1992637,0.2614914,0.2999813,0.1712449,0.0559413,-0.0227755,-0.0697783,-0.8165194,0.2673185,0.1592267,-0.4724103,0.4816095,0.3126902,0.0101012,-0.0961136,-0.4620961,0.1028763,0.0697180,-0.5273641,0.3631118,-0.5269109,0.3522158,-0.2827883,-0.0794749},
	{0.2070077,0.0891968,0.9117821,-0.4176563,0.0610865,0.0430841,-0.2811937,-0.3416015,0.0061660,0.3599602,0.1387234,-0.3125137,0.0513112,0.2130757,0.7888141,-0.0563566,0.1740475,0.1716912,-0.2410789,-0.0459808,0.2172375,-0.0320028,-0.8479728,0.3474770},
	{-0.1318575,0.0314550,-0.2076222,-0.9199437,-0.1934349,-0.1470243,0.4005314,0.0076368,0.0954153,0.1135307,-0.0245425,0.3437616,-1.5718790,-0.5026875,-0.6773102,-1.0791909,0.0813313,0.0602376,0.1838869,0.3415543,-0.5444833,-0.0175009,-0.1369060,0.5957717},
	{-0.2431379,0.7808712,0.2211513,-0.5780793,0.1360260,-0.0220780,-0.3431296,0.1443168,-0.2611094,0.2695365,-0.1260505,-0.1746925,0.2344690,-0.1708879,-0.0113388,0.2027491,0.4852470,-0.1071133,0.7814078,0.0631129,-0.9996117,-0.1074149,1.2544087,-0.2224524},
	{0.0219894,0.8209286,-0.0302798,-0.4958561,0.2348083,-0.6932810,-0.1679232,0.8951611,0.3241158,0.0747846,0.4282192,0.2567985,0.1559715,-0.1998496,0.2643633,0.7363873,3.5857344,0.3988414,0.4217996,-0.4501001,0.0688873,-0.4503865,0.2443812,-0.3037737},
	{0.1555482,-0.3830101,0.3929631,0.2032436,0.0561754,-0.0783829,-0.8616445,-0.3355223,-0.0277820,0.2781189,-0.3760160,0.1360935,-0.0386155,-0.7373095,0.0234754,0.1854803,0.3645938,-0.4734359,-0.1717995,-0.2113058,0.2966836,-0.2994750,0.1414604,0.2528117},
	{-0.1378354,-2.1667657,0.2877703,0.0588741,0.1419805,-0.1003142,-0.8634676,-0.4815863,-0.0451164,0.0500229,0.7264425,0.3735627,0.2767806,0.0563833,-0.0195967,0.1215206,0.0374092,0.2253375,-0.0408102,0.1841440,-0.2315263,0.1061103,-0.2646049,0.0532982},
	{-0.1960461,-0.5062158,0.5860462,0.0976827,0.1207333,-0.3678049,-0.4126365,-0.6076151,0.0966078,0.4067366,-0.3110722,0.0358874,0.7919685,0.5482543,0.3493037,0.0072392,0.0311178,-0.0226326,-0.4441577,0.3045526,0.1971431,0.3798146,-0.0769652,0.1206606},
	{0.0974998,0.1579243,0.1896835,-0.3476977,-0.0343194,-0.0466453,-0.7452017,-0.4242404,0.2381523,0.3637252,-0.1652407,-0.3291729,-0.0382348,-0.4926520,0.0167622,-0.0948508,0.0275802,-0.0993650,0.3161753,0.2329348,0.0370079,-0.1184733,-0.6122155,0.3304856},
	{0.2189316,-0.2141628,0.2414131,-1.1196691,-0.0617412,-0.3076362,-0.5516856,0.8787110,2.0741920,0.1651478,0.5968681,0.2906992,0.0191089,0.3426809,0.5761461,-0.5282393,0.6048584,0.3896122,0.2432305,-0.5790038,-0.1261795,-0.1494073,0.1611562,-0.2598419},
	{-0.2147830,-0.0306968,0.0665393,-1.0226483,-0.1431327,-0.3183517,-0.6507255,1.0677979,1.1102625,0.2282001,0.2926964,0.3515270,0.0472581,-0.2281066,-0.8558820,-1.6978413,0.2994381,0.7111042,0.2956141,-0.0267794,-0.2012720,-0.0725366,-0.4838071,0.4818192},
	{-0.2895020,1.0802296,0.1555820,0.0585678,-0.3646321,-0.5258313,-0.6732483,0.0310312,-0.4073075,-0.1972725,1.1065726,-0.5930358,0.3670268,-0.7267077,-0.0708101,0.6893699,-10.3433210,-0.3845613,0.1511566,-0.1480910,-1.3776047,-0.2494949,0.6605067,0.2191941},
	{-0.2521950,1.2310240,0.6921595,-0.1058698,0.3175125,-0.4634707,-1.1947228,0.4361736,-0.9676880,0.3277887,-0.0273006,0.1255627,-0.1239610,-0.3486296,0.1877378,-0.1254074,0.7057477,0.6154923,0.4527087,-0.0804089,-0.3564569,-0.3613169,0.7376317,0.1240265},
	{-0.2512220,1.2775161,0.2723432,-0.5799329,-0.1880315,-0.4089036,0.0829438,-0.0529723,-0.0294638,-0.0231385,-0.5154209,-0.2252447,0.5465450,-0.7322724,0.1512235,0.1201713,-0.0413026,-0.2673635,0.9395750,-0.3709633,-0.7197384,0.1146246,-0.2801777,-0.0003619},
	{0.2044278,1.3539131,0.4293233,-0.4039354,0.1041695,-0.4998091,-0.0108701,-0.0662160,-0.3159337,0.7994431,0.0656247,-0.4116874,0.2612182,-0.8345168,-0.3581238,0.2636041,-0.0639103,0.4510195,-0.1079663,-0.1525168,0.3598344,-0.0430388,0.4528136,-0.4263767},
	{0.1530434,0.2869029,0.7278060,-0.3429288,-0.1244908,-0.0215786,0.1273929,-0.6925648,0.0275535,0.5635232,-0.1661473,0.4747550,0.1995438,-0.4165624,0.6289208,-0.0853623,0.0208056,0.1816212,0.3267446,0.0722821,-0.2576491,0.1506789,-0.4116505,-0.1254183},
	{0.1218235,0.5041976,0.2106143,-0.4978917,0.0183812,-0.1994580,-0.4197301,-0.0849341,-0.0342001,0.3592590,-0.1536810,0.2529524,-0.3159261,-0.7112049,-0.3049991,-0.2781763,-0.2764132,0.0040519,0.9079628,-0.3018808,-0.1743619,-0.2620489,-0.2167859,-0.0845126},
	{-0.1105818,0.1045745,0.0247930,-1.4207360,0.0382346,-0.1233610,-0.9929555,0.7737427,0.8946753,0.5948511,-0.4787912,0.0462315,0.4465393,-0.6193239,-0.8533086,-2.0827750,-0.2820367,0.7324647,0.1111379,-0.1800909,0.1482203,-0.0206961,-0.3788789,-0.0770420},
	{-0.3770577,-1.4088279,-0.4891545,-0.0146605,0.2063715,-0.0894643,0.7589626,0.3185834,-8.3574900,-0.1132135,0.0965889,-0.2311659,0.6608086,-0.1993681,-1.6783725,-0.9092466,-0.7890843,0.6460583,0.7262952,-0.3312446,-0.3266644,0.0107091,-0.4207818,-0.2076743},
	{0.4000402,0.1858485,0.1808694,0.4572141,9.5457450,0.9141487,-0.0541590,0.1776362,0.1371616,0.1163739,0.3026438,-0.8875860,-0.3018698,0.0155962,0.1460955,-0.2598496,0.2987336,0.8276160,0.8495740,-0.6167180,-0.0849131,-1.3481703,0.2218700,0.5732184},
	{0.3239511,-0.4337154,-0.0262009,-0.0740124,-1.0140175,0.6932009,0.4126040,0.4249191,-0.0415951,-0.5303197,0.6063438,-0.5327976,0.0457620,0.0770272,0.5466493,1.3524221,-0.1101859,-0.9667018,0.0985771,-0.4271294,-0.8592881,-1.3558406,-0.2305647,-0.0203176},
	{0.4814646,0.2919650,-0.4375299,0.0733992,0.1020519,0.1769243,-0.1448959,0.1860524,-0.0478026,-0.5224137,-0.0379634,0.5617032,0.2125363,0.1585783,-0.4125637,0.5132481,0.1654420,-0.4500250,0.5241708,0.0465127,-0.3022107,-0.7888857,0.3999183,-0.6842536},
	{-0.3580332,-0.1133340,1.1562400,0.3421212,0.1185570,0.5665238,0.3260553,0.2202851,-0.1669716,-0.5560751,-0.3018793,1.2210857,0.2316881,-0.2442691,0.2731389,0.0624074,-0.0653649,0.0909115,-0.1937869,-0.0574759,0.5881603,-0.3043763,0.2386685,-0.1434835},
	{0.1578852,-0.1768982,-0.4081475,-0.3149228,-0.0132837,-0.0222430,0.0197604,-0.1473826,0.3314477,-0.2395582,-0.0534750,0.1545327,-0.1454506,-0.2171624,0.4305535,-0.0044786,-0.0682487,-0.8462315,0.5441498,-0.1643604,-0.5161930,0.0751009,-0.6010235,0.1911046},
	{0.2857453,0.1770892,-0.3976548,0.3155912,-0.0338356,-0.5716295,-0.2346301,0.6945646,-0.0507561,-0.7227116,-0.2849429,0.8343311,0.1850373,0.2208767,0.0441815,0.0906227,0.0313611,-0.4509409,-0.2830346,-0.4501948,-0.7550129,-0.7692537,-0.5825932,0.1774826},
	{-0.8755114,0.0187837,-0.7604732,-0.3631609,0.0837137,0.3704289,-0.0010439,0.6889231,0.1652324,-0.7914660,-0.3553806,1.8138102,-1.2205490,-0.1462601,0.4110458,-0.1951165,-0.2694194,-0.2096755,-0.3387277,-0.2033879,0.2736854,-0.1851983,-0.2650614,-0.8308068},
	{5.4228150,-0.2446186,-0.5211424,0.0931044,0.3438565,-1.1724207,0.5711746,0.1694371,0.3091183,-0.4732312,-0.9816120,-0.2839513,0.3101638,-0.0360826,0.3435801,0.4499179,0.2451346,0.9127857,1.2229700,-0.8923162,0.3443203,-0.1148209,-0.2966402,0.6356508},
	{-0.1450780,-1.0845165,-0.5287802,-0.1367572,-1.3558697,0.8496649,0.0744529,0.8301599,-0.2907261,-0.2969335,1.2425902,0.0143069,-0.0335592,-0.2953506,0.2418129,0.7335410,0.4896996,-0.6361330,-0.2467039,-0.0769918,-0.1700177,-1.1910684,-0.0051725,-0.8981055},
	{-0.0418848,0.1306465,-0.5507625,0.4908038,-3.1072326,0.2468290,0.4335944,0.8875803,-0.0096897,-0.3576232,0.7377829,-0.2311837,-0.7043921,-0.2665750,-0.0177559,-0.2194944,-0.3387771,0.0017497,0.1727129,-0.2535971,-0.6084634,-0.6881213,0.3883730,-0.2782200},
	{-0.1065087,-0.0092761,-0.3416273,0.0690493,-0.1646215,0.3900326,-0.0405307,-0.2266970,-0.1282782,-0.8665563,0.4167551,0.2567867,0.0878835,0.0783780,0.2381335,-0.1283390,-0.1473568,-0.7939301,0.1517272,0.0349221,0.8080910,0.3537420,0.4785973,-0.1554386},
	{0.1212271,0.1590248,-0.0641701,-0.0828700,-0.2685295,0.2110077,-0.1093144,0.1679709,0.0884900,-0.3740202,0.6124008,0.2447570,-0.0754014,0.3273634,-0.2449782,0.2435249,-0.0390684,-0.8076667,-0.5176988,-0.0470153,0.0700613,0.5213109,-0.3801215,-0.2836643},
	{0.1101266,0.0103471,0.2187855,0.2185177,-0.2632082,0.2910616,0.0028834,0.1215957,-0.2277688,-0.0743017,0.1081276,0.8159666,0.0845105,0.2279713,-0.1693083,-0.0791915,-0.0260972,-0.3613794,0.1062933,-0.2817352,-0.1588162,0.5359791,-0.3826115,-0.4710404},
	{-0.3118379,-0.2338227,-0.2412053,0.0278128,-0.0592127,-0.4221916,0.4281086,-0.2199413,-0.0236391,-0.0614635,-0.2173825,0.8621602,-0.1675111,-0.0782366,-0.1197880,0.4516467,-0.1828009,-0.8465232,1.2215377,0.0616163,-0.1458123,0.0418464,-0.4375502,-0.1177622},
	{-1.8734261,-0.1952820,-0.3473045,-0.0352434,-0.4169572,-0.3403901,0.7346019,0.5004178,-0.1020274,-0.7329842,-0.0518646,0.9225256,-0.5035068,-0.5158925,0.5155814,0.4428801,-0.3973108,0.0805927,0.0111040,-0.9086419,0.5355461,0.1507953,-0.2462027,-0.4685372},
	{-0.7371401,-0.5293686,-0.6655549,0.5323090,-0.2722218,-0.5145675,0.5810673,0.1512468,0.7144707,-0.3212030,-0.1266982,0.8743568,-1.0045192,0.4342906,0.0790141,0.6057615,-0.3822010,0.5270701,0.9101690,-0.7030782,-0.1292598,-0.1289124,-0.6512774,-1.0188007},
	{-0.4443820,0.0875056,0.0737941,0.1481214,0.2913042,0.9451234,-0.2663848,0.7534896,0.3601727,-0.1542837,0.5624222,-0.4111031,0.1832191,0.1741889,0.1750814,-0.0278297,-0.0272244,0.1228293,-0.2242499,-0.1907480,0.5179525,-0.6183438,1.2241116,-0.4364192},
	{-0.1700179,-0.3154706,0.1206833,-0.0081500,-0.3377801,0.1639377,0.4858134,0.3008046,0.1151126,0.0324089,1.6149356,0.1035984,0.1930231,-0.0045605,-0.2149931,0.1431212,-0.2173330,-0.2957028,-0.8246370,-0.2316026,0.5485102,0.1508227,-0.0822031,0.0257034},
	{0.0940205,-0.3206418,0.1218439,0.0412127,-0.2483106,-0.3818619,0.1516373,-0.1384692,0.0935709,-0.2565129,0.2660214,0.4510602,-0.0819363,0.3194065,0.6784581,0.2381837,0.0683456,-0.8007561,-0.2031600,0.6836316,-0.4811521,0.4372995,-0.3888917,-0.4145995},
	{0.1549637,-0.0675912,0.2496350,0.4661215,-0.0070741,0.0967379,0.0969638,-0.1579235,-0.1341610,-0.1898827,-0.0969775,-0.0630532,0.0305552,0.2067805,0.2197162,-0.2606770,-0.0655247,-0.6571605,0.0230539,0.2853589,-0.0461754,0.6286466,0.3236092,-0.3071693},
	{0.1996285,0.2394504,0.2642395,0.3047969,0.0272953,0.6393487,0.0688570,-0.1491001,-0.0110787,-0.3312459,0.4383711,0.6064367,-0.0076899,-0.2637903,-0.3165015,0.3992704,-0.0315961,-0.4024338,-0.0362142,-0.3137066,-0.0773396,0.5118465,-0.2253828,0.0147292},
	{-0.0262876,-0.4404535,0.0441267,0.3317282,0.0040786,0.1935288,0.0832669,-0.3029183,0.0895041,-0.0210332,-0.0467859,0.8980734,-0.1931702,0.1239074,-0.4685517,-0.1687747,-0.1638205,-0.0256223,0.0781254,0.3196043,-0.1021252,0.2339192,-0.2850453,-0.1835529},
	{-0.2398788,0.2088972,-0.0385799,-0.3220748,-0.1515419,-0.0805710,0.2382057,-0.0601561,0.0721319,0.0810916,0.4548986,0.7525671,-0.0936530,0.1329138,0.0760261,0.0897301,-0.1419602,-0.1999834,0.3362439,0.6548919,0.3034542,0.5699676,0.0659119,-0.5740036},
	{0.2342883,-0.2276217,0.0084342,-0.5654266,-0.0138196,-0.4323933,0.1640914,0.5694984,0.2148252,-0.0347265,-0.2147189,-0.0600861,-0.8815534,0.2402956,-0.3611515,-0.6531072,0.0047601,-0.3553154,0.2357086,0.5623428,-0.2943453,-0.0830319,-0.3855415,0.0493676},
	{0.0459836,-0.2233586,-0.3155860,0.0545263,0.3536560,1.2786665,0.1226964,0.1330517,-0.0236183,0.1855656,0.8635504,0.1476530,0.0236625,-0.1590170,0.4171985,0.4121159,-0.0893996,-0.1964351,-0.5681991,0.6798035,0.1028376,-0.3502678,0.0961565,-0.1720831},
	{0.0424126,0.0219410,-0.3232563,0.5802108,-0.3513427,0.7257381,0.0478792,-0.0484901,-0.3093455,-0.1130095,0.6102644,-0.3303062,0.2146355,0.3460816,0.3331477,0.1497336,-0.1283399,-0.3936081,0.1152986,-0.0132886,0.3079254,0.4385454,-0.4562818,-0.2276056},
	{0.0637807,0.1445091,0.2110311,0.3178222,-0.0916979,0.5461042,0.0251173,0.0440744,-0.0674925,-0.2280827,0.8061113,-0.0680414,0.0327195,0.0253292,0.4527477,0.1206943,-0.0738061,-0.2168263,-0.1809050,-0.1329928,-0.0096535,0.6090289,-0.3664905,-0.1392377},
	{-0.1575947,-0.0507682,0.0505987,0.5628530,-0.1876373,-0.0547563,0.1050970,-0.3553015,-0.1676331,-0.0421867,-0.2026100,-0.1081248,0.1469959,0.3871956,-0.0012962,-0.1904055,-0.0492670,-0.1930125,-0.1751684,0.0772320,0.1802388,0.6999590,0.0145835,0.0331086},
	{-0.2373735,0.0110356,0.1968126,0.4910601,0.0097784,0.0724346,0.0040189,-0.3462766,-0.0708628,0.1850190,-0.4294596,0.2362061,-0.0467150,0.1272015,0.0306935,-0.1739055,-0.0678991,-0.2986048,-0.4269659,0.1747216,0.1950662,0.5198109,-0.1453797,-0.0383986},
	{0.2067571,0.0538992,-0.3366507,0.5115857,-0.0985562,0.3703100,0.5436468,-0.4990907,0.1757338,0.0274838,0.2817177,0.5440684,-0.0959158,0.2677594,0.2506351,0.0404575,0.0387825,-0.2781109,0.0890012,0.0912686,0.0958155,0.6351332,-0.7399672,0.2749760},
	{0.0407546,-0.0933494,-0.2074600,0.2137618,-0.1460424,0.1362566,0.2583337,-0.1733540,-0.1497250,0.1338164,0.1052224,-0.0093241,-0.8485061,0.0627213,-0.2677219,0.1227261,-0.3404797,-0.2852566,0.3733549,0.2650271,0.9444419,0.2562704,-0.1855966,-0.0525384},
	{-0.0392986,0.2930413,0.1124122,-0.6836484,0.0477543,-0.4106218,-0.1659337,0.3663703,-0.0493755,0.3259398,0.0944552,0.0940057,-1.3215016,-0.0329041,-0.5045219,0.1401447,-0.0324680,-0.3112046,0.0122025,0.3245176,0.3689428,0.2157266,-0.5643268,0.2869802},
	{0.3739874,0.4672512,0.1932250,-0.1647301,0.0263421,0.2926951,-0.0504353,0.2885602,-0.2203702,0.0559842,0.0137279,-0.3602814,-0.1271003,-0.4100559,0.0861045,0.1985415,-0.1387702,0.2815942,-0.4171582,-0.3800679,-0.3204963,0.2977661,0.2761495,0.0716607},
	{0.0280531,-0.1759980,0.0304182,0.0489653,-0.3140333,-0.1822395,0.0958511,0.2343219,-0.2201130,0.2817519,-0.2671606,-0.3816111,-0.0199381,0.1146771,0.1511853,-0.1551575,-0.2533515,-0.0717532,-0.5975041,0.0261276,-0.2384138,0.1861744,-0.3353667,-0.0384363},
	{-0.1926042,0.8054757,0.2489859,0.5080781,0.0322437,0.4767010,-0.2873762,-0.3169455,-0.1667503,0.6204441,0.3339914,0.3196172,0.3589086,-0.0650389,-0.2443743,0.2431707,-0.1075387,-0.0523201,-0.4250280,0.1421354,-0.3112594,0.6370285,-0.7618957,0.1448286},
	{-0.0740647,0.3180579,0.0035427,0.5323780,-0.0261427,0.1025431,-0.0345443,-0.4952612,0.0485551,-0.0191445,-0.2438210,-0.1509825,0.1548403,0.3685847,0.1012371,-0.0652517,0.0989658,-0.2857246,-0.1018737,0.4867314,-0.0067701,0.5131624,0.1003541,-0.1814667},
	{-0.2432996,-0.1812136,0.3438073,0.7062846,-0.1222697,-0.0415288,-0.1715106,-0.1522946,0.1805639,-0.1021683,-0.0854242,0.0547893,0.1951376,0.1660095,-0.1145982,0.1468923,0.0353444,-0.0765746,-0.2378479,0.2519332,0.2784406,0.8271998,0.1290183,-0.1083032},
	{-0.1679525,0.1618211,0.4307582,0.6343522,-0.0922789,-0.2454179,-0.0686579,-0.2350811,0.0562877,0.5752528,0.2852868,0.0577498,0.2912000,0.2802524,-0.7582244,0.1429447,-0.1463483,0.4558941,-0.2287889,0.0459548,-0.2989973,0.4801591,-0.5927745,0.3123518},
	{0.0707322,0.2350270,0.2420638,0.2270506,-0.0205904,0.0232745,0.3213552,-0.0284744,-0.1299685,-0.0654706,-0.2411661,0.2343551,-0.5261998,0.1202694,-0.5579993,0.2163221,-0.2837800,0.3076910,-0.4577077,0.1631905,0.1089444,0.0711877,-0.3344028,-0.4309857},
	{0.1405432,-0.0499431,-0.1940580,0.1299919,0.0156090,0.1055294,-0.1245920,0.1632137,0.0423983,0.0127254,-0.2024839,0.4000915,-1.0893275,-0.0763355,-0.1756956,0.0443495,-0.0497393,0.3550379,0.2152156,-0.0804829,0.1956518,-0.2328971,-0.4256664,-0.3959241},
	{0.1500930,0.3417577,0.0060310,-0.0435645,0.1082950,0.6730441,0.4644970,0.1074318,-0.0060494,0.1567092,0.4875887,0.0629405,0.3429103,-0.1623447,0.3255319,-0.6525758,-0.0839578,-0.0515913,-0.0391208,0.3850857,0.0598300,-0.0031322,1.1713912,-0.3261904},
	{-0.0583316,0.5270572,-0.1267309,-0.0485323,0.0496950,0.3948914,0.0088394,0.3031796,-0.2548038,0.5452489,0.1037009,-0.0293059,0.4460653,-0.7807435,0.1741384,-0.6737604,-0.1875603,-0.0076410,-0.7120495,0.3667821,0.4207185,0.1649344,-0.0028724,-0.5389517},
	{-0.0231950,0.5566775,0.1201283,0.2225488,-0.0117366,0.2309419,0.4026109,-0.1473430,-0.2250829,-0.1690501,0.2708740,-1.0460200,0.3013884,-0.0601265,0.3837635,-0.3263475,0.0923961,-0.2628818,-0.7091948,0.4212173,0.7301347,0.1814478,0.0592221,-0.5939994},
	{-0.2804887,-0.4684059,0.1426099,0.7196129,-0.1081531,-0.2350489,-0.2657746,-0.1936970,0.0316446,0.2531305,-0.4499996,-0.0214338,0.1563994,0.0903642,-0.2140917,-0.4144962,-0.1224024,-0.0246936,-0.3688596,0.5162824,-0.0857168,0.5985041,-0.4201157,-0.0597062},
	{-0.1421342,0.2075907,-0.3059601,0.8443188,0.0999419,-0.0189821,0.0207471,-0.4558842,-0.0241587,-0.0652999,-0.4601617,-0.1170214,0.2301315,0.1115338,0.0279403,0.3472121,0.0387067,0.1083588,-0.2302201,0.0462835,0.5409231,0.6816192,0.1152154,0.1346106},
	{-0.0262812,-0.0019797,-0.0561338,0.5529648,-0.1123447,-0.1061833,0.0996150,-0.1187837,0.2304600,0.3664453,-0.1982347,0.2491562,0.4168406,0.1244894,-0.2690069,0.1474291,0.0595199,0.2490573,-0.2196156,0.5367733,-0.4197058,0.2553368,-0.5459506,-0.2659903},
	{0.0416477,-0.0826344,-0.2424081,0.1492317,-0.1526339,-0.0002974,0.5361252,0.2649228,-0.2569986,0.4608892,0.3811457,-0.4196801,0.4158855,0.3546151,-1.5761158,0.2113654,-0.0452133,-0.2320683,0.1180476,0.3174986,-0.0466814,-0.0316919,-0.4480715,-0.2525076},
	{0.4943602,-0.2075687,-0.3543997,-0.8128347,-0.0222390,-0.4374076,-0.3267309,0.7134172,0.4223833,-0.2475517,-0.0206905,-0.1735988,-1.5288469,-0.1998010,-0.7036322,-1.2201816,-0.2555293,0.5037593,0.3274280,0.4088360,-0.1397480,0.5406789,0.4003266,0.2734173},
	{0.4159755,0.5170758,0.3298817,0.0468676,-0.1937748,0.0363438,-0.1868803,0.7119441,0.1285902,0.1535964,-0.1849728,-0.7827296,-0.1221333,-0.5162761,0.3438386,0.8226085,-0.5536087,-0.3837555,0.8096858,-0.4784937,-0.5196552,-0.0855248,1.1453412,0.2327928},
	{-0.4066668,1.8888055,-0.3456816,-0.1536665,-0.5092887,-0.3098703,0.1850744,1.3421024,-0.3769709,0.1215451,0.1532195,-0.1751892,-0.3257639,-0.1657933,0.6292626,0.9451435,-2.9171047,-0.2257953,-0.0864093,-1.0693942,0.0048441,-0.2369656,-0.4726380,-0.3930315},
	{-0.0500614,2.1115177,-0.2886773,0.0819510,-0.1595037,-0.2368875,0.6749704,0.2410908,0.0381850,0.2500019,0.2874449,-0.2998175,0.2105721,-0.2564985,0.2691461,-0.0682777,-0.1474493,-0.3869875,-0.3751136,0.0929042,0.1023507,0.1326049,0.1923793,0.0186012},
	{0.0272909,1.5963141,-0.0031737,0.2864762,-0.0650350,0.4232724,0.9277402,-0.2112053,0.1738206,0.1693339,0.1208333,0.0459334,0.1622485,0.0385209,-0.1511735,0.2649800,-0.2058677,0.3396397,-0.3768608,0.1965571,-0.1457368,0.2146108,-0.5717354,0.1305288},
	{0.0715282,0.1708673,0.1965590,0.5222897,-0.1257928,-0.3958382,0.8642865,-0.1533275,0.0223395,0.4319243,0.0373201,0.0854382,0.5696521,0.0735750,0.3326212,0.2476514,-0.0197566,-0.0025337,-0.7009542,1.0159886,-0.1010856,0.4952108,0.0011189,-0.2899618},
	{0.1395256,-0.1412038,0.0732507,0.1197282,-0.2902201,-0.2306724,0.4519021,0.1052706,0.1031779,0.4967091,0.0541893,-0.0265552,0.1296428,-0.5835611,-0.7398737,0.7700301,-0.2383269,-0.0063606,0.3361180,0.0584847,-0.0044510,-0.0802266,-0.0830921,-0.3341312},
	{-0.3535594,-0.3540775,-0.3610529,-0.6603394,0.3278559,0.1084631,0.9391882,1.2231729,-1.8640254,0.3723234,-0.1098433,-0.2148429,-0.2056290,0.4488139,-1.1920296,0.5399519,-0.5028436,0.5169248,-0.0988854,-1.5808322,-0.4189689,0.1569373,-0.1911889,-1.2805117},
	{0.2888483,-0.7985964,-0.1107002,-0.2179671,0.0060116,0.4807246,0.9262029,1.2036464,-0.8096893,0.1837175,-0.7880532,-0.1737021,-0.0984579,-0.2204277,-1.9863514,-0.7932991,-0.4169866,0.3520465,0.7581281,-0.4964084,0.5568247,0.0217667,-0.6688504,-0.2525651},
	{-0.2213897,1.3666248,-0.3599701,0.0406723,0.5834938,-0.1412385,-0.7634534,-0.0807390,0.4115241,-0.0738686,0.3255598,-0.2632569,-0.4824224,-0.8807273,-0.2057664,1.0238159,10.0281410,-0.1858722,-0.4127098,-0.9646798,-0.2973988,-0.2300780,0.2408997,0.1582753},
	{0.8419201,2.8227427,0.6479324,0.2978437,-0.4956843,0.1464609,1.3786842,0.9181662,0.5103516,0.2592601,-0.3064787,-0.5077308,0.2718419,-0.1148937,0.5049289,-0.3048155,-0.5421826,0.1494223,0.4163886,-0.6982846,-0.1517018,-0.2195486,0.6049862,-0.9941486},
	{0.3503485,1.8374227,-0.2581192,-0.5973174,0.2601351,-0.9582546,-0.1166015,0.3588937,0.0919328,0.0177175,-0.2710180,-0.2627290,-0.2531585,-0.4602985,-0.1099346,0.5935073,0.1282368,-0.0778565,0.2334183,-0.3396352,-0.0457081,0.4916131,0.5201710,-0.2647020},
	{0.2605269,0.4873788,0.4204428,-0.3311881,-0.0170307,0.0564947,0.1688201,0.1300284,-0.1434005,0.8608592,0.0330500,-0.2438042,0.0853403,-1.0327398,0.1492681,0.0654809,0.2376915,0.3692453,-0.1685954,0.0658643,0.0834011,0.1056442,-0.4027243,-0.4516801},
	{-0.2361645,-0.0373208,-0.0317636,0.4770173,0.0801585,-0.0527925,0.0928169,-0.0097072,0.1980234,0.5411116,-0.2772601,-0.4780436,0.3030132,-0.5315159,-0.0619549,0.2814690,-0.1500778,0.0006662,0.2350607,0.1630932,-0.3080134,0.0391347,0.1506830,-0.2538698},
	{-0.3621216,0.8004581,-0.0961049,-0.7749642,0.0164214,-0.4098099,0.0826619,0.1872339,-0.0128705,0.2357032,-0.1999144,-0.0899494,0.2489318,-0.8478410,-0.0808223,-0.1135268,0.2969802,0.1617581,1.0773352,-0.1687736,-0.1254577,-0.1369835,-0.3784305,0.3870705},
	{0.3130573,-0.9203183,-0.3050818,-0.8623589,-0.1609606,0.3179345,1.4373150,1.3623171,-0.6095855,0.7361159,-0.4571821,-0.1870380,-0.0756564,-0.4915391,-1.0809063,-1.1264944,0.2618242,0.4381093,0.4743192,-0.3519333,0.1790707,0.2406340,-0.8328902,-1.1086419},
	{0.1163069,-1.1725360,-0.7562370,-0.1717313,-0.0414057,-0.0038351,-0.8311298,0.1903594,6.6410327,0.0234881,-0.2517708,-0.6661933,-0.7285147,-0.4752024,-1.5799810,-1.3001990,0.8402303,-0.5237539,0.1949321,-0.9574309,0.0476372,0.0085986,0.0014022,0.4214091}
};
double e1[150] = { -0.2400826,-0.0349262,0.2363737,0.7425295,0.0116594,-0.1206513,0.0271446,-0.7721565,-0.0703311,-0.0066454,-0.3353231,-0.0711107,0.4528498,0.5614985,-0.0129138,0.0367506,0.0582933,-0.0898171,-0.3609683,0.1138659,0.2500109,0.7814410,0.1299850,-0.0177946 };
double d2[150][150] = {
	{0.0886681,0.1715088,0.2748381,-0.0091813,-0.1302538,0.1152785,0.0234376,0.0628648},
	{-0.2081300,-0.1117481,-0.0427089,-0.0691174,0.1467779,0.0352003,-0.0170640,0.1167986},
	{0.1258719,-0.0521339,0.0401097,0.1618330,-0.2324843,-0.2972665,-0.2457258,0.0439769},
	{0.1081021,0.0542577,-0.1016316,-0.3558487,-0.2748677,0.0566342,0.3038291,0.0099626},
	{0.1203294,0.0758830,0.0066809,0.3762354,-0.0722576,0.0312248,0.0393602,0.0705962},
	{-0.2199964,0.2078567,0.1903572,0.0289815,-0.0137558,-0.0848100,0.0679796,0.5460429},
	{-0.2093562,-0.0400682,-0.1234177,-0.3326836,-0.0321635,0.2716577,0.2995325,-0.0853947},
	{-0.3286729,0.3211486,0.0033529,0.0985549,-0.1003542,0.3150920,0.0046118,0.1492253},
	{0.0462414,-0.0309366,0.4593893,-0.0510436,-0.0415475,0.1767793,0.2243948,-0.0236595},
	{0.0286747,-0.5749799,0.0421807,-0.0132252,-0.2971374,0.2342236,-0.2484598,0.0079678},
	{-0.2817818,-0.0160874,-0.0199350,0.1495225,0.1311884,-0.2697377,-0.0126864,0.3321367},
	{-0.0978502,0.2041538,0.2580587,-0.0830231,0.0580135,-0.1543305,-0.1284722,-0.2496627},
	{0.0097854,-0.2481458,-0.4645941,0.1119670,0.0131157,-0.1121656,-0.0750049,0.1133038},
	{0.2998247,-0.0174053,-0.4350058,-0.1827122,-0.0278577,-0.2808380,0.2330268,-0.3708056},
	{0.2220267,0.1940856,-0.3567792,-0.0586118,-0.1187918,0.0055576,0.1076278,0.2039828},
	{-0.1041948,-0.0182337,0.1378443,0.1982986,-0.0912859,0.0968088,0.1689073,-0.0161276},
	{0.2940903,0.0312465,-0.0686998,0.1665595,-0.0360588,0.1277450,0.0999069,0.1288578},
	{0.0546753,-0.3532287,0.1558262,0.2107969,0.2945432,0.1996621,0.0331417,-0.0242363},
	{0.0409379,0.2223378,0.1550617,0.0311322,0.1294657,0.1505114,-0.1569691,-0.3212687},
	{0.2065024,-0.3532213,-0.0757600,-0.2165668,-0.0601223,-0.2274690,0.1774779,-0.2309769},
	{0.2056712,-0.2383015,0.1293932,0.1065402,-0.1471204,-0.0595784,0.0745801,-0.2533719},
	{-0.0047233,0.0879666,-0.1739082,-0.1631928,-0.3926410,0.1202442,0.1068200,-0.0147411},
	{0.0333532,-0.0923032,-0.2757992,-0.0606966,0.0811567,-0.0765633,-0.1250262,0.0073525},
	{0.0265469,-0.3104401,0.0401982,0.3462108,0.1969158,-0.1700368,0.1621731,0.0703412}
};
double e2[150] = { -0.2395533,-1.4601573,-0.5652884,0.3817185,-1.1448420,-1.1374600,1.0001804,-1.4686059 };
double d3[150][150] = {
	{-0.1303539,-0.9939759},
	{0.6168793,-1.1050153},
	{-0.2075578,-0.8280966},
	{0.7873276,0.1333467},
	{-1.1920940,1.3821504},
	{0.7382048,-0.9359085},
	{0.9565737,-0.5962849},
	{1.2869730,0.0951607}
};
double e3[150] = { 0.3620353,-0.3620272 };
double aa0[150], aa1[150], aa2[150], aa3[150];

// 全体で使う変数
int Situation = 0;
int Three_Elapsed = 0;
double GetLastClick = 0.0;
double PI = 3.14159265358979;
int RandX[1 << 13][64];
int Moto1[1 << 16][8], Moto2[1 << 16][8];
int pow4[9] = { 1, 4, 16, 64, 256, 1024, 4096, 16384, 65536 };

// その他の変数
int ALPHA = 1000;
int PLAYS = 1000;
int BACKETS = 50;
const double TEISUU_A = 0.3;
const double TEISUU_B = -0.014;
const int MAX_STATES = 9600000;
int col1[11] = { 100, 100, 175, 100, 100, 100, 100, 100, 100, 100, 100 };
int col4[11] = { 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40 };
int col2[10][10];

// オセロの盤面など
State CurrentState;
int Next_Move = 1, Sente = 1, Ti = 0, Consecutive = 0;
int Score1 = 0, Score2 = 0, preX, preY;
double Win_Rate = 0;
bool usable[8][8];
bool IsAnalysis = false;

// モンテカルロ木探索
int StateCnt = 0;
int TansakuCnt = 0;
int AlphaBeta = 0;
State CandState[MAX_STATES];
short CandTurn[MAX_STATES]; float win[MAX_STATES], searched[MAX_STATES], tesuu[MAX_STATES];
short deg[MAX_STATES]; char nex_zahyou[MAX_STATES][24]; int nexnum[MAX_STATES];

// 詳細分析
vector<tuple<State, int, int, int, int>> FinalRes;
int TESUU = 0;

int dx[8] = { 0, 1, 1, 1, 0, -1, -1, -1 };
int dy[8] = { 1, 1, 0, -1, -1, -1, 0, 1 };
vector<double> Data;

double StringToDouble(string str) {
	if (str[0] == '[') str = str.substr(1, str.size() - 1);
	if (str[str.size() - 1] == ']') str = str.substr(0, str.size() - 1);
	return stod(str);
}

double hantei(State& SS, int turn) {
	for (int i = 0; i < 150; i++) aa1[i] = 0;
	for (int i = 0; i < 150; i++) aa2[i] = 0;
	for (int i = 0; i < 150; i++) aa3[i] = 0;

	// 前処理
	for (int i = 0; i <= 7; i++) {
		for (int j = 0; j <= 7; j++) {
			int idx = i * 8 + j;
			if (SS.c[i][j] == 3 - turn) aa0[idx] = 1;
			else aa0[idx] = 0;
			if (SS.c[i][j] == turn) aa0[idx + 64] = 1;
			else aa0[idx + 64] = 0;
		}
	}

	// 1 層目
	for (int i = 0; i < STAGE1; i++) {
		if (aa0[i] == 0) continue;
		for (int j = 0; j < STAGE2; j++) aa1[j] += d1[i][j];
	}
	for (int i = 0; i < STAGE2; i++) {
		aa1[i] += e1[i];
		aa1[i] = tanh(aa1[i]);
		if (rand() % 100 < 10) aa1[i] = 0;
	}

	// 2 層目
	for (int i = 0; i < STAGE2; i++) {
		for (int j = 0; j < STAGE3; j++) aa2[j] += aa1[i] * d2[i][j];
	}
	for (int i = 0; i < STAGE3; i++) {
		aa2[i] += e2[i];
		aa2[i] = tanh(aa2[i]);
	}

	// 3 層目
	double S = 0;
	for (int i = 0; i < STAGE3; i++) {
		for (int j = 0; j < STAGE4; j++) aa3[j] += aa2[i] * d3[i][j];
	}
	for (int i = 0; i < STAGE4; i++) {
		aa3[i] += e3[i];
		S += exp(aa3[i]);
	}
	for (int i = 0; i < STAGE4; i++) aa3[i] = exp(aa3[i]) / S;

	// 勝率決定
	return aa3[0];
}

void Update(State& V, int px, int py, int turn) {
	int sa = (turn - V.c[px][py]);
	V.c[px][py] = turn;
	V.bit1[px] += sa * pow4[py];
	V.bit2[py] += sa * pow4[px];
	V.bit3[px + py] += sa * pow4[py];
	V.bit4[px - py + 7] += sa * pow4[py];
}

int check_usable(vector<int> vec, int turn) {
	bool flag1 = false, flag2 = false;
	for (int i = 0; i < vec.size(); i++) {
		if (vec[i] == 0) return 0;
		if (vec[i] != turn) { flag1 = true; }
		if (vec[i] == turn) { flag2 = true; break; }
	}
	if (flag1 == true && flag2 == true) return 1;
	return 0;
}

void Reset() {
	Data.clear();
	Win_Rate = 0.5;
	preX = -1; preY = -1;
	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) CurrentState.c[i][j] = 0;
	}
	if (Sente == 1) {
		Update(CurrentState, 3, 3, 2);
		Update(CurrentState, 3, 4, 1);
		Update(CurrentState, 4, 3, 1);
		Update(CurrentState, 4, 4, 2);
	}
	if (Sente == 2) {
		Update(CurrentState, 3, 3, 1);
		Update(CurrentState, 3, 4, 2);
		Update(CurrentState, 4, 3, 2);
		Update(CurrentState, 4, 4, 1);
	}
	for (int i = 0; i < (1 << 13); i++) {
		for (int j = 0; j < 64; j++) RandX[i][j] = j;
		for (int j = 0; j < 640; j++) swap(RandX[i][rand() % 64], RandX[i][rand() % 64]);
	}

	for (int i = 0; i < pow4[8]; i++) {
		int bit[8]; bool flag1 = false;
		for (int j = 0; j < 8; j++) {
			bit[j] = (i / pow4[j]) % 4;
			if (bit[j] == 3) flag1 = true;
		}
		if (flag1 == true) continue;
		for (int j = 0; j < 8; j++) {
			if (bit[j] != 0) continue;
			vector<int> v1, v2;
			for (int k = j - 1; k >= 0; k--) v1.push_back(bit[k]);
			for (int k = j + 1; k < 8; k++) v2.push_back(bit[k]);
			Moto1[i][j] = 0;
			Moto2[i][j] = 0;
			Moto1[i][j] |= check_usable(v1, 1);
			Moto1[i][j] |= check_usable(v2, 1);
			Moto2[i][j] |= check_usable(v1, 2);
			Moto2[i][j] |= check_usable(v2, 2);
		}
	}
}

bool hantei_easy(State& T, int ty, int px, int py) {
	if (T.c[px][py] != 0) return false;
	if (ty == 1) {
		if (Moto1[T.bit1[px]][py] == 1) return true;
		if (Moto1[T.bit2[py]][px] == 1) return true;
		if (Moto1[T.bit3[px + py]][py] == 1) return true;
		if (Moto1[T.bit4[px - py + 7]][py] == 1) return true;
		return false;
	}
	if (ty == 2) {
		if (Moto2[T.bit1[px]][py] == 1) return true;
		if (Moto2[T.bit2[py]][px] == 1) return true;
		if (Moto2[T.bit3[px + py]][py] == 1) return true;
		if (Moto2[T.bit4[px - py + 7]][py] == 1) return true;
		return false;
	}
	return false;
}

void Moves(State& V, int turn, int px, int py) {
	for (int i = 0; i < 8; i++) {
		int sx = px, sy = py; bool flag1 = false, flag2 = false;
		while (true) {
			sx += dx[i], sy += dy[i];
			if (sx < 0 || sy < 0 || sx >= 8 || sy >= 8 || V.c[sx][sy] == 0) break;
			if (V.c[sx][sy] != turn) { flag1 = true; }
			if (V.c[sx][sy] == turn) { flag2 = true; break; }
		}
		if (flag1 == true && flag2 == true) {
			sx = px; sy = py;
			while (true) {
				sx += dx[i], sy += dy[i];
				if (sx < 0 || sy < 0 || sx >= 8 || sy >= 8 || V.c[sx][sy] == 0) break;
				if (V.c[sx][sy] != turn) Update(V, sx, sy, turn);
				else if (V.c[sx][sy] == turn) break;
			}
		}
	}

	Update(V, px, py, turn);
}

// サボったαβ探索
tuple<int, int, int> dfs2(State V, int turn) {
	// 0 : 分からない／-1: 負け／1: 引き分け／2: 勝ち
	if (AlphaBeta > ALPHA) return make_tuple(0, -1, -1);

	AlphaBeta += 1;
	int seed = (rand() & 8191), cnt_moves = 0;

	pair<int, int> hikiwake = make_pair(-1, -1);
	for (int i = 0; i < 64; i++) {
		int vx = (RandX[seed][i] >> 3), vy = (RandX[seed][i] & 7);
		if (hantei_easy(V, turn, vx, vy) == true) {
			State VV = V;
			Moves(VV, turn, vx, vy);
			int res = get<0>(dfs2(VV, 3 - turn));
			if (res == -1) return make_tuple(2, vx, vy);
			if (res == 0) return make_tuple(0, -1, -1);
			if (res == 1) hikiwake = make_pair(vx, vy);
			cnt_moves += 1;
		}
	}
	if (hikiwake != make_pair(-1, -1)) {
		return make_tuple(1, hikiwake.first, hikiwake.second);
	}

	if (cnt_moves == 0) {
		for (int i = 0; i < 64; i++) {
			int vx = (RandX[seed][i] >> 3), vy = (RandX[seed][i] & 7);
			if (hantei_easy(V, 3 - turn, vx, vy) == true) {
				cnt_moves += 1;
			}
		}
		if (cnt_moves == 0) {
			int count1 = 0, count2 = 0;
			for (int i = 0; i < 8; i++) {
				for (int j = 0; j < 8; j++) {
					if (V.c[i][j] == turn) count1++;
					if (V.c[i][j] == 3 - turn) count2++;
				}
			}
			if (turn == 1) {
				if (PLAYS < 0) {
					if (count1 < count2) return make_tuple(2, -1, -1);
					if (count1 == count2) return make_tuple(1, -1, -1);
					return make_tuple(-1, -1, -1);
				}
				else {
					if (count1 < count2) return make_tuple(-1, -1, -1);
					if (count1 == count2) return make_tuple(1, -1, -1);
					return make_tuple(2, -1, -1);
				}
			}
			if (turn == 2) {
				if (PLAYS < 0) {
					if (count1 > count2) return make_tuple(-1, -1, -1);
					if (count1 == count2) return make_tuple(1, -1, -1);
					return make_tuple(2, -1, -1);
				}
				else {
					if (count1 > count2) return make_tuple(2, -1, -1);
					if (count1 == count2) return make_tuple(1, -1, -1);
					return make_tuple(-1, -1, -1);
				}
			}
			return make_tuple(-1, -1, -1);
		}
		else {
			tuple<int, int, int> res = dfs2(V, 3 - turn);
			if (get<0>(res) == -1) return make_tuple(2, -1, -1);
			if (get<0>(res) == 1) return make_tuple(1, -1, -1);
			if (get<0>(res) == 0) return make_tuple(0, -1, -1);
			return make_tuple(-1, -1, -1);
		}
	}
	return make_tuple(-1, -1, -1);
}

// 厳密なαβ探索
tuple<int, int, int> dfs3(State V, int OptEval, int turn) {
	// 0 : 分からない／-1: 負け／1: 引き分け／2: 勝ち
	if (AlphaBeta > ALPHA) return make_tuple(-1, -1, -1);

	AlphaBeta += 1;
	int seed = (rand() & 8191), cnt_moves = 0;
	tuple<int, int, int> next_move = make_tuple(-1, -1, -1); if (turn == 2) next_move = make_tuple(65, -1, -1);
	for (int i = 0; i < 64; i++) {
		int vx = (RandX[seed][i] >> 3), vy = (RandX[seed][i] & 7);
		if (hantei_easy(V, turn, vx, vy) == true) {
			State VV = V;
			Moves(VV, turn, vx, vy);
			int res = get<0>(dfs3(VV, get<0>(next_move), 3 - turn));
			if (turn == 1) next_move = max(next_move, make_tuple(res, vx, vy));
			if (turn == 2) next_move = min(next_move, make_tuple(res, vx, vy));
			if (turn == 1 && res > OptEval) return next_move;
			if (turn == 2 && res < OptEval) return next_move;
			cnt_moves += 1;
		}
	}

	if (cnt_moves == 0) {
		for (int i = 0; i < 64; i++) {
			int vx = (RandX[seed][i] >> 3), vy = (RandX[seed][i] & 7);
			if (hantei_easy(V, 3 - turn, vx, vy) == true) {
				cnt_moves += 1;
			}
		}
		if (cnt_moves == 0) {
			int count1 = 0, count2 = 0;
			for (int i = 0; i < 8; i++) {
				for (int j = 0; j < 8; j++) {
					if (V.c[i][j] == 1) count1++;
					if (V.c[i][j] == 2) count2++;
				}
			}
			if (PLAYS < 0) return make_tuple(64 * count2 / (count1 + count2), -1, -1);
			return make_tuple(64 * count1 / (count1 + count2), -1, -1);
		}
		else {
			int opt = -1; if (turn == 2) opt = 65;
			tuple<int, int, int> res = dfs3(V, opt, 3 - turn);
			return res;
		}
	}
	return next_move;
}

int Random_Playout(State V, int turn) {
	int flagcnt = 0;
	while (flagcnt <= 1) {
		bool flag = false; int seed = (rand() & 8191);
		for (int i = 0; i < 64; i++) {
			int vx = (RandX[seed][i] >> 3), vy = (RandX[seed][i] & 7);
			usable[vx][vy] = hantei_easy(V, turn, vx, vy);
			if (usable[vx][vy] == true) {
				flagcnt = 0;
				Moves(V, turn, vx, vy);
				turn = (3 - turn);
				flag = true; break;
			}
		}
		if (flag == false) { turn = (3 - turn); flagcnt += 1; }
	}

	int V1 = 0, V2 = 0;
	for (int i = 0; i <= 7; i++) {
		for (int j = 0; j <= 7; j++) {
			if (V.c[i][j] == 1) V1 += 1;
			if (V.c[i][j] == 2) V2 += 1;
		}
	}
	return 64 * V1 / (V1 + V2);
}

double eval(int score, int rem) {
	double keisuu = 0.03 * rem;
	return 1.0 / (1.0 + exp((32.0 - 1.0 * score) / keisuu));
}

void Initialize(State& SS, int pos, int turn) {
	if (pos != -1) deg[pos] += 1;

	CandState[StateCnt] = SS;
	CandTurn[StateCnt] = turn;
	deg[StateCnt] = 0;
	win[StateCnt] = 0;
	searched[StateCnt] = 0;

	for (int i = 0; i < 8; i++) CandState[StateCnt].bit1[i] = 0;
	for (int i = 0; i < 8; i++) CandState[StateCnt].bit2[i] = 0;
	for (int i = 0; i < 15; i++) CandState[StateCnt].bit3[i] = 0;
	for (int i = 0; i < 15; i++) CandState[StateCnt].bit4[i] = 0;

	for (int i = 0; i < 8; i++) {
		for (int j = 0; j < 8; j++) {
			CandState[StateCnt].bit1[i] += SS.c[i][j] * pow4[j];
			CandState[StateCnt].bit2[j] += SS.c[i][j] * pow4[i];
			CandState[StateCnt].bit3[i + j] += SS.c[i][j] * pow4[j];
			CandState[StateCnt].bit4[i - j + 7] += SS.c[i][j] * pow4[j];
		}
	}
	StateCnt += 1;
}

pair<double, double> Gen_Random(int pos, int rems) {
	double a1 = 0.0, a2 = 0.0;
	for (int i = 0; i < deg[pos]; i++) {
		int idx = nexnum[pos] + i;
		// int FinalPoint = Random_Playout(CandState[idx], CandTurn[idx]);
		double FinalScore = hantei(CandState[idx], CandTurn[idx]);
		if (CandTurn[idx] == 2) FinalScore = 1.0 - FinalScore;
		win[idx] += FinalScore;
		searched[idx] += 1.0;
		a1 += FinalScore;
		a2 += 1.0;
	}
	return make_pair(a1, a2);
}

pair<double, double> dfs(int pos, int rems) {
	if (deg[pos] != 0) {
		int maxid = -1; double maxn = -1e5;
		for (int i = 0; i < deg[pos]; i++) {
			int idx = nexnum[pos] + i;
			double TEISUU = TEISUU_A - TEISUU_B * (Score1 + Score2);
			if (pos == 0) {
				if (IsAnalysis == true) TEISUU = 10.0;
				else if (PLAYS >= 50000) TEISUU = 1.8;
			}
			double eval1 = (1.0 * win[idx] / searched[idx]); if (CandTurn[pos] == 2) eval1 = 1.0 - eval1;
			double eval2 = sqrt(1.0 * log(1.0 * searched[pos]) / searched[idx]);
			double evals = eval1 + TEISUU * eval2; if (PLAYS < 0) evals = (1.0 - eval1) + TEISUU * eval2;
			if (maxn < evals) {
				maxn = evals;
				maxid = i;
			}
		}
		pair<double, double> AA = dfs(nexnum[pos] + maxid, rems);
		win[pos] += AA.first;
		searched[pos] += AA.second;
		return AA;
	}
	else {
		vector<pair<int, int>> nex_f; int V1 = 0, V2 = 0;
		for (int i = 0; i <= 7; i++) {
			for (int j = 0; j <= 7; j++) {
				usable[i][j] = hantei_easy(CandState[pos], CandTurn[pos], i, j);
				if (usable[i][j] == true) nex_f.push_back(make_pair(i, j));
				if (CandState[pos].c[i][j] == 1) V1 += 1;
				if (CandState[pos].c[i][j] == 2) V2 += 1;
			}
		}
		if (nex_f.size() != 0) {
			nexnum[pos] = StateCnt;
			for (int i = 0; i < min(24, (int)nex_f.size()); i++) {
				nex_zahyou[pos][i] = nex_f[i].first * 8 + nex_f[i].second;
				Initialize(CandState[pos], pos, 3 - CandTurn[pos]);
				Moves(CandState[StateCnt - 1], CandTurn[pos], (nex_zahyou[pos][i] >> 3), (nex_zahyou[pos][i] & 7));
			}
			pair<double, double> AA = Gen_Random(pos, rems);
			win[pos] += AA.first;
			searched[pos] += AA.second;
			return AA;
		}
		else {
			int cnt2 = 0;
			for (int i = 0; i < 8; i++) {
				for (int j = 0; j < 8; j++) {
					usable[i][j] = hantei_easy(CandState[pos], 3 - CandTurn[pos], i, j);
					if (usable[i][j] == true) cnt2 += 1;
				}
			}
			if (cnt2 != 0) {
				nexnum[pos] = StateCnt;
				nex_zahyou[pos][0] = -1;
				Initialize(CandState[pos], pos, 3 - CandTurn[pos]);

				pair<double, double> AA = Gen_Random(pos, rems);
				win[pos] += AA.first;
				searched[pos] += AA.second;
				return AA;
			}
			else {
				double FinalScore = eval(64 * V1 / (V1 + V2), rems);
				win[pos] += FinalScore;
				searched[pos] += 1.0;
				return make_pair(FinalScore, 1.0);
			}
		}
	}
}

double get_shouritsu(int turn, int rems) {
	StateCnt = 0;
	TansakuCnt = 0;
	AlphaBeta = 0;
	Initialize(CurrentState, -1, turn);

	for (int i = 0; i < 3000; i++) {
		TansakuCnt += 1;
		dfs(0, rems);
	}
	if (turn == 1) {
		double minx2 = -1.0;
		for (int i = 0; i < deg[0]; i++) {
			int idx = nexnum[0] + i;
			minx2 = max(minx2, 1.0 * win[idx] / searched[idx]);
		}
		return minx2;
	}
	else {
		double minx2 = 2.0;
		for (int i = 0; i < deg[0]; i++) {
			int idx = nexnum[0] + i;
			minx2 = min(minx2, 1.0 * win[idx] / searched[idx]);
		}
		return minx2;
	}
}

vector<tuple<State, int, int, int, int>> fix_result(vector<tuple<State, int, int, int, int>> V) {
	while (V.size() >= 2) {
		bool flag = false;
		for (int i = 0; i < 8; i++) {
			for (int j = 0; j < 8; j++) {
				if (get<0>(V[V.size() - 1]).c[i][j] != get<0>(V[V.size() - 2]).c[i][j]) flag = true;
			}
		}
		if (flag == false) V.pop_back();
		else break;
	}
	return V;
}

void Main() {
	// 背景を水色にする
	srand((unsigned)time(NULL));
	Scene::SetBackground(ColorF(0.0, 0.0, 0.1));

	// フォントを用意
	const Font font80(80);
	const Font font60(60);
	const Font font40(40);
	const Font font30(30);
	const Font font20(20);
	const Font font15(15);
	const Font font10(10);

	while (System::Update()) {
		double MouseX = Cursor::PosF().x;
		double MouseY = Cursor::PosF().y;

		// [状態 0] 待ち受け画面
		if (Situation == -1) {
			font40(U"record_new.txt を").draw(280, 130);
			font40(U"ダウンロードしてください").draw(160, 185);
			font20(U"このファイルを .exe ファイルと同じ階層に置かなければ").draw(140, 350);
			font20(U"ゲームで遊ぶことができません").draw(260, 380);
		}
		if (Situation == 0) {
			Rect(200, 250, 400, 65).draw(Color(col1[0], col1[0], col1[0]));
			Rect(200, 330, 400, 65).draw(Color(col1[1], col1[1], col1[1]));
			Rect(200, 410, 400, 65).draw(Color(col1[4], col1[4], col1[4]));

			font80(U"Othello 869120").draw(100, 45);
			font30(U"～モンテカルロ木探索・深層学習によるオセロ対戦～").draw(45, 150);
			font30(U"AI 対戦（先手）").draw(290, 260, Palette::Black);
			font30(U"AI 対戦（後手）").draw(290, 340, Palette::Black);
			font30(U"二人プレイ").draw(310, 420, Palette::Black);
			font30(U"クリックしてゲームを始める").draw(200, 525, ColorF(Periodic::Sine0_1(1.5s)));

			if (MouseX >= 200.0 && MouseX <= 600.0 && MouseY >= 250.0 && MouseY <= 315.0) col1[0] = min(col1[0] + 9, 240);
			else col1[0] = max(col1[0] - 9, 100);
			if (MouseX >= 200.0 && MouseX <= 600.0 && MouseY >= 330.0 && MouseY <= 395.0) col1[1] = min(col1[1] + 9, 240);
			else col1[1] = max(col1[1] - 9, 100);
			if (MouseX >= 200.0 && MouseX <= 600.0 && MouseY >= 410.0 && MouseY <= 475.0) col1[4] = min(col1[4] + 9, 240);
			else col1[4] = max(col1[4] - 9, 100);

			if (Scene::Time() - GetLastClick >= 0.1 && MouseL.down()) {
				GetLastClick = Scene::Time();
				if (MouseX >= 200.0 && MouseX <= 600.0 && MouseY >= 250.0 && MouseY <= 315.0) { Next_Move = 1; Situation = 1; Sente = 1; Reset(); }
				if (MouseX >= 200.0 && MouseX <= 600.0 && MouseY >= 330.0 && MouseY <= 395.0) { Next_Move = 2; Situation = 1; Sente = 2; Reset(); }
				if (MouseX >= 200.0 && MouseX <= 600.0 && MouseY >= 410.0 && MouseY <= 475.0) { Next_Move = 1; Situation = 2; Sente = 1; Reset(); PLAYS = -1; BACKETS = -1; ALPHA = -1; }
			}
		}

		// [状態 1] コンピュータのレベル選択
		if (Situation == 1) {
			font60(U"コンピュータのレベル選択").draw(40, 45);
			font30(U"クリックしてレベルを選択").draw(215, 525, ColorF(Periodic::Sine0_1(1.5s)));
			Rect(80, 170, 200, 70).draw(Color(255, 0, 0, 255 * col4[0] / 100));
			Rect(80, 260, 200, 70).draw(Color(255, 0, 0, 255 * col4[1] / 100));
			Rect(80, 350, 200, 70).draw(Color(255, 0, 0, 255 * col4[2] / 100));
			Rect(80, 440, 200, 70).draw(Color(255, 0, 0, 255 * col4[3] / 100));
			Rect(300, 170, 200, 70).draw(Color(255, 0, 0, 255 * col4[4] / 100));
			Rect(300, 260, 200, 70).draw(Color(255, 0, 0, 255 * col4[5] / 100));
			Rect(300, 350, 200, 70).draw(Color(255, 0, 0, 255 * col4[6] / 100));
			Rect(300, 440, 200, 70).draw(Color(255, 0, 0, 255 * col4[7] / 100));
			Rect(520, 170, 200, 70).draw(Color(0, 127, 255, 255 * col4[8] / 100));
			Rect(520, 260, 200, 70).draw(Color(0, 127, 255, 255 * col4[9] / 100));
			font30(U"レベル -1").draw(110, 187, Palette::Black);
			font30(U"レベル 0").draw(120, 277, Palette::Black);
			font30(U"レベル 1").draw(120, 367, Palette::Black);
			font30(U"レベル 2").draw(120, 457, Palette::Black);
			font30(U"レベル 3").draw(340, 187, Palette::Black);
			font30(U"レベル 4").draw(340, 277, Palette::Black);
			font30(U"レベル 5").draw(340, 367, Palette::Black);
			font30(U"レベル 6").draw(340, 457, Palette::Black);
			font30(U"レベル 7").draw(560, 187, Palette::Black);
			font30(U"レベル 8").draw(560, 277, Palette::Black);

			if (MouseX >= 80.0 && MouseX <= 280.0 && MouseY >= 170.0 && MouseY <= 240.0) col4[0] = min(col4[0] + 4, 100);
			else col4[0] = max(col4[0] - 4, 40);
			if (MouseX >= 80.0 && MouseX <= 280.0 && MouseY >= 260.0 && MouseY <= 330.0) col4[1] = min(col4[1] + 4, 100);
			else col4[1] = max(col4[1] - 4, 40);
			if (MouseX >= 80.0 && MouseX <= 280.0 && MouseY >= 350.0 && MouseY <= 420.0) col4[2] = min(col4[2] + 4, 100);
			else col4[2] = max(col4[2] - 4, 40);
			if (MouseX >= 80.0 && MouseX <= 280.0 && MouseY >= 440.0 && MouseY <= 510.0) col4[3] = min(col4[3] + 4, 100);
			else col4[3] = max(col4[3] - 4, 40);
			if (MouseX >= 300.0 && MouseX <= 500.0 && MouseY >= 170.0 && MouseY <= 240.0) col4[4] = min(col4[4] + 4, 100);
			else col4[4] = max(col4[4] - 4, 40);
			if (MouseX >= 300.0 && MouseX <= 500.0 && MouseY >= 260.0 && MouseY <= 330.0) col4[5] = min(col4[5] + 4, 100);
			else col4[5] = max(col4[5] - 4, 40);
			if (MouseX >= 300.0 && MouseX <= 500.0 && MouseY >= 350.0 && MouseY <= 420.0) col4[6] = min(col4[6] + 4, 100);
			else col4[6] = max(col4[6] - 4, 40);
			if (MouseX >= 300.0 && MouseX <= 500.0 && MouseY >= 440.0 && MouseY <= 510.0) col4[7] = min(col4[7] + 4, 100);
			else col4[7] = max(col4[7] - 4, 40);
			if (MouseX >= 520.0 && MouseX <= 720.0 && MouseY >= 170.0 && MouseY <= 240.0) col4[8] = min(col4[8] + 4, 100);
			else col4[8] = max(col4[8] - 4, 40);
			if (MouseX >= 520.0 && MouseX <= 720.0 && MouseY >= 260.0 && MouseY <= 330.0) col4[9] = min(col4[9] + 4, 100);
			else col4[9] = max(col4[9] - 4, 40);

			if (Scene::Time() - GetLastClick >= 0.1 && MouseL.down()) {
				GetLastClick = Scene::Time();
				if (MouseX >= 80.0 && MouseX <= 280.0 && MouseY >= 170.0 && MouseY <= 240.0) { Situation = 2; PLAYS = -3000; BACKETS = 30; ALPHA = 100000; }
				if (MouseX >= 80.0 && MouseX <= 280.0 && MouseY >= 260.0 && MouseY <= 330.0) { Situation = 2; PLAYS = 0; BACKETS = 1; ALPHA = -1; }
				if (MouseX >= 80.0 && MouseX <= 280.0 && MouseY >= 350.0 && MouseY <= 420.0) { Situation = 2; PLAYS = 1; BACKETS = 1; ALPHA = 10; }
				if (MouseX >= 80.0 && MouseX <= 280.0 && MouseY >= 440.0 && MouseY <= 510.0) { Situation = 2; PLAYS = 7; BACKETS = 7; ALPHA = 70; }
				if (MouseX >= 300.0 && MouseX <= 500.0 && MouseY >= 170.0 && MouseY <= 240.0) { Situation = 2; PLAYS = 30; BACKETS = 10; ALPHA = 300; }
				if (MouseX >= 300.0 && MouseX <= 500.0 && MouseY >= 260.0 && MouseY <= 330.0) { Situation = 2; PLAYS = 150; BACKETS = 15; ALPHA = 1000; }
				if (MouseX >= 300.0 && MouseX <= 500.0 && MouseY >= 350.0 && MouseY <= 420.0) { Situation = 2; PLAYS = 700; BACKETS = 20; ALPHA = 10000; }
				if (MouseX >= 300.0 && MouseX <= 500.0 && MouseY >= 440.0 && MouseY <= 510.0) { Situation = 2; PLAYS = 3000; BACKETS = 30; ALPHA = 100000; }
				if (MouseX >= 520.0 && MouseX <= 720.0 && MouseY >= 170.0 && MouseY <= 240.0) { Situation = 2; PLAYS = 100000; BACKETS = 100; ALPHA = 4000000; }
				if (MouseX >= 520.0 && MouseX <= 720.0 && MouseY >= 260.0 && MouseY <= 330.0) { Situation = 2; PLAYS = 200000; BACKETS = 100; ALPHA = 15000000; }
			}
		}

		// [状態 2] ゲームプレイ画面
		if (Situation == 2) {
			Score1 = 0; Score2 = 0;
			for (int i = 0; i <= 7; i++) {
				for (int j = 0; j <= 7; j++) {
					if (CurrentState.c[i][j] == 1) Score1 += 1;
					if (CurrentState.c[i][j] == 2) Score2 += 1;
				}
			}

			Rect(550, 0, 250, 600).draw(Color(51, 0, 0)); int ex = -1, ey = -1;
			if (MouseX >= 55.0 && MouseX <= 495.0 && MouseY >= 80.0 && MouseY <= 520.0) {
				ex = (MouseX - 55.0) / 55.0;
				ey = (MouseY - 80.0) / 55.0;
			}
			for (int i = 0; i <= 7; i++) {
				for (int j = 0; j <= 7; j++) {
					if (i == preX && j == preY) Rect(55 + i * 55, 80 + j * 55, 55, 55).draw(Color(50 + col2[i][j], 50 + col2[i][j], 255));
					else Rect(55 + i * 55, 80 + j * 55, 55, 55).draw(Color(col2[i][j], 100 + 3 * col2[i][j] / 5, col2[i][j]));
					if (i == ex && j == ey) col2[i][j] = min(col2[i][j] + 7, 100);
					else col2[i][j] = max(col2[i][j] - 7, 0);
				}
			}

			font30(U"Othello E869120｜GamePlay").draw(15, 15);
			for (int i = 0; i <= 8; i++) Line(55 + 55 * i, 80, 55 + 55 * i, 520).draw(Color(255, 255, 255));
			for (int i = 0; i <= 8; i++) Line(55, 80 + 55 * i, 495, 80 + 55 * i).draw(Color(255, 255, 255));

			for (int i = 0; i <= 7; i++) {
				for (int j = 0; j <= 7; j++) {
					if (CurrentState.c[i][j] == 0) continue;
					int I = CurrentState.c[i][j];
					if (Sente == 2) I = (3 - I);
					if (I == 1) Circle(82 + 55 * i, 107 + 55 * j, 18).draw(Color(0, 0, 0));
					if (I == 2) Circle(82 + 55 * i, 107 + 55 * j, 18).draw(Color(255, 255, 255));
				}
			}

			if (Sente == 1) {
				if (BACKETS == -1) {
					font20(U"先手のスコア").draw(580, 15);
					font20(U"後手のスコア").draw(580, 125);
				}
				if (BACKETS != -1) {
					font20(U"黒番（自分）のスコア").draw(580, 15);
					font20(U"白番（AI）のスコア").draw(580, 125);
				}
				if (Next_Move == 1) Circle(569, 29, 5).draw(Color(255, 255, 0));
				if (Next_Move == 2) Circle(569, 139, 5).draw(Color(255, 255, 0));
				if (Score1 <= 9) font40(Score1).draw(755, 45);
				if (Score1 >= 10) font40(Score1).draw(735, 45);
				if (Score2 <= 9) font40(Score2).draw(755, 155);
				if (Score2 >= 10) font40(Score2).draw(735, 155);
			}
			if (Sente == 2) {
				if (BACKETS == -1) {
					font20(U"先手のスコア").draw(580, 15);
					font20(U"後手のスコア").draw(580, 125);
				}
				if (BACKETS != -1) {
					font20(U"黒番（AI）のスコア").draw(580, 15);
					font20(U"白番（自分）のスコア").draw(580, 125);
				}
				if (Next_Move == 2) Circle(569, 29, 5).draw(Color(255, 255, 0));
				if (Next_Move == 1) Circle(569, 139, 5).draw(Color(255, 255, 0));
				if (Score2 <= 9) font40(Score2).draw(755, 45);
				if (Score2 >= 10) font40(Score2).draw(735, 45);
				if (Score1 <= 9) font40(Score1).draw(755, 155);
				if (Score1 >= 10) font40(Score1).draw(735, 155);
			}
			if (BACKETS != -1) font20(U"あなたの勝利可能性").draw(575, 300);
			if (BACKETS == -1) {
				font20(U"先手の勝利可能性").draw(575, 300);
				font10(U"※±10% 程度は振れる場合があります").draw(625, 580);
			}
			if (Win_Rate >= 0.75) {
				Circle(675, 455, 100).draw(Color(0, 255, 0, 40));
				Circle(675, 455, 100).drawPie(0, ToRadians(max(0.01, min(0.99, Win_Rate)) * 360.0), Color(0, 255, 0));
			}
			else if (Win_Rate >= 0.25) {
				Circle(675, 455, 100).draw(Color(255, 255, 0, 40));
				Circle(675, 455, 100).drawPie(0, ToRadians(max(0.01, min(0.99, Win_Rate)) * 360.0), Color(255, 255, 0));
			}
			else {
				Circle(675, 455, 100).draw(Color(255, 0, 0, 40));
				Circle(675, 455, 100).drawPie(0, ToRadians(max(0.01, min(0.99, Win_Rate)) * 360.0), Color(255, 0, 0));
			}
			Circle(675, 455, 70).draw(Color(51, 0, 0));
			int Fixed_Win_Rate = 100.0 * Win_Rate + 0.5;
			Fixed_Win_Rate = max(1, min(99, Fixed_Win_Rate));
			if (Fixed_Win_Rate <= 9) {
				font60(Fixed_Win_Rate).draw(660, 415);
				font30(U"%").draw(700, 447);
			}
			else {
				font60(Fixed_Win_Rate).draw(625, 415);
				font30(U"%").draw(700, 447);
			}

			// 自分の場合
			if (Next_Move == 1 || BACKETS < 0) {
				font20(U"クリックで手を打つことができます").draw(100, 550, ColorF(Periodic::Sine0_1(1.5s)));
				for (int i = 0; i < 8; i++) {
					for (int j = 0; j < 8; j++) usable[i][j] = hantei_easy(CurrentState, Next_Move, i, j);
				}

				bool flag = false, flag2 = false, flag3 = false;
				for (int i = 0; i < 8; i++) {
					for (int j = 0; j < 8; j++) {
						if (usable[i][j] == true) { Circle(82 + 55 * i, 107 + 55 * j, 8).draw(Color(255, 127, 127)); flag = true; }
						if (CurrentState.c[i][j] == 0) flag2 = true;
					}
				}
				for (int i = 0; i < 8; i++) {
					for (int j = 0; j < 8; j++) {
						if (hantei_easy(CurrentState, 3 - Next_Move, i, j) == true) flag3 = true;
					}
				}

				if (flag2 == false || (flag == false && flag3 == false)) {
					Rect(0, 0, 550, 600).draw(Color(0, 255, 0, 225));

					if (BACKETS == -1) {
						if (Score1 < Score2) font80(U"後手勝利！").draw(75, 150);
						else if (Score1 == Score2) font80(U"引き分け！").draw(75, 150);
						else font80(U"先手勝利！").draw(75, 150);
					}
					if (BACKETS != -1) {
						if (Score1 < Score2) font80(U"敗北！").draw(155, 150);
						else if (Score1 == Score2) font80(U"引き分け！").draw(75, 150);
						else font80(U"勝利！").draw(155, 150);
					}

					font40(U"ゲームは終了しました").draw(75, 250);
					Rect(100, 400, 380, 80).draw(Color(255, 255, 255, col1[3]));
					if (MouseX >= 100.0 && MouseX <= 450.0 && MouseY >= 380.0 && MouseY <= 460.0) col1[3] = max(col1[3] - 13, 100);
					else col1[3] = min(col1[3] + 13, 255);
					font40(U"リザルト画面").draw(150, 412, Color(0, 0, 0));

					if (Scene::Time() - GetLastClick >= 0.1 && MouseL.down()) {
						GetLastClick = Scene::Time();
						FinalRes.push_back(make_tuple(CurrentState, Next_Move, -1, -1, Data.size()));
						FinalRes = fix_result(FinalRes);
						if (MouseX >= 100.0 && MouseX <= 450.0 && MouseY >= 380.0 && MouseY <= 460.0) {
							if (Score1 < Score2) Data.push_back(0.0);
							if (Score1 == Score2) Data.push_back(0.5);
							if (Score1 > Score2) Data.push_back(1.0);
							Situation = 3; Three_Elapsed = 0; col1[3] = 100;
						}
					}
				}
				else if (flag == false) {
					Rect(0, 0, 550, 600).draw(Color(255, 0, 0, 225));
					font80(U"残念！").draw(155, 150);
					font40(U"打てる手がありません").draw(75, 250);
					Rect(100, 400, 380, 80).draw(Color(255, 255, 255, col1[3]));
					if (MouseX >= 100.0 && MouseX <= 450.0 && MouseY >= 380.0 && MouseY <= 460.0) col1[3] = max(col1[3] - 13, 100);
					else col1[3] = min(col1[3] + 13, 255);
					font40(U"パスする").draw(190, 412, Color(0, 0, 0));

					if (Scene::Time() - GetLastClick >= 0.1 && MouseL.down()) {
						GetLastClick = Scene::Time();
						if (MouseX >= 100.0 && MouseX <= 450.0 && MouseY >= 380.0 && MouseY <= 460.0) {
							FinalRes.push_back(make_tuple(CurrentState, Next_Move, -1, -1, Data.size()));
							Next_Move = 3 - Next_Move; Ti = 0; col1[3] = 100;
						}
					}
				}
				else {
					Consecutive = 0;
					if (Scene::Time() - GetLastClick >= 0.1 && MouseL.down()) {
						GetLastClick = Scene::Time();
						if (ex != -1 && ey != -1 && usable[ex][ey] == true) {
							if (BACKETS < 0) Win_Rate = get_shouritsu(Next_Move, 64 - Score1 - Score2);
							FinalRes.push_back(make_tuple(CurrentState, Next_Move, ex, ey, Data.size()));
							Moves(CurrentState, Next_Move, ex, ey); if (Next_Move == 1) Data.push_back(Win_Rate);
							Next_Move = 3 - Next_Move; Ti = 0;
							preX = ex; preY = ey;
						}
					}
				}
			}

			// 相手の場合
			else if (Next_Move == 2) {
				Ti += 1;

				if (Ti == 2) {
					// 画面表示
					Rect(0, 0, 550, 600).draw(Color(168, 156, 46, 225));
					font80(U"考え中…").draw(115, 130);
					font40(U"しばらくお待ちください").draw(75, 230);

					StateCnt = 0;
					TansakuCnt = 0;
					AlphaBeta = 0;
					Initialize(CurrentState, -1, 2);
				}
				if (Ti == 3) {
					// 画面表示
					Rect(0, 0, 550, 600).draw(Color(168, 156, 46, 225));
					font80(U"考え中…").draw(115, 130);
					font40(U"しばらくお待ちください").draw(75, 230);

					// α-β探索
					tuple<int, int, int> res = dfs2(CurrentState, 2);
					if (get<0>(res) >= 1) {
						if (get<1>(res) == -1) {
							FinalRes.push_back(make_tuple(CurrentState, Next_Move, -1, -1, Data.size()));
							Win_Rate = 0.0; if (PLAYS < 0) Win_Rate = 1.0;
							Next_Move = 1; Ti = 0; Consecutive += 1;
						}
						else {
							int mx = get<1>(res), my = get<2>(res);
							if (get<0>(res) == 2) {
								AlphaBeta = 0;
								tuple<int, int, int> res2 = dfs3(CurrentState, -1, 2);
								if (AlphaBeta < ALPHA) { mx = get<1>(res2); my = get<2>(res2); }
							}
							if (mx == -1 && my == -1) {
								FinalRes.push_back(make_tuple(CurrentState, Next_Move, -1, -1, Data.size()));
								Win_Rate = 0.0; if (PLAYS < 0) Win_Rate = 1.0;
								Next_Move = 1; Ti = 0; Consecutive += 1;
							}
							else {
								FinalRes.push_back(make_tuple(CurrentState, Next_Move, mx, my, Data.size()));
								Moves(CurrentState, 2, mx, my);
								Win_Rate = 0.0; if (PLAYS < 0) Win_Rate = 1.0;
								Next_Move = 1; Ti = 0;
								preX = mx; preY = my;
							}
						}
					}
					else if (get<0>(res) == -1) {
						AlphaBeta = 0;
						tuple<int, int, int> res2 = dfs3(CurrentState, -1, 2);
						if (AlphaBeta < ALPHA) {
							if (get<1>(res2) == -1 && get<2>(res2) == -1) {
								FinalRes.push_back(make_tuple(CurrentState, Next_Move, -1, -1, Data.size()));
								Win_Rate = 1.0; if (PLAYS < 0) Win_Rate = 0.0;
								Next_Move = 1; Ti = 0; Consecutive += 1;
							}
							else{
								FinalRes.push_back(make_tuple(CurrentState, Next_Move, get<1>(res2), get<2>(res2), Data.size()));
								Moves(CurrentState, 2, get<1>(res2), get<2>(res2));
								Win_Rate = 1.0; if (PLAYS < 0) Win_Rate = 0.0;
								Next_Move = 1; Ti = 0;
								preX = get<1>(res2); preY = get<2>(res2);
							}
						}
					}
				}
				if (Ti >= 4) {
					vector<pair<int, int>> nex; int rems = 0;
					for (int i = 0; i < 8; i++) {
						for (int j = 0; j < 8; j++) {
							usable[i][j] = hantei_easy(CurrentState, 2, i, j);
							if (usable[i][j] == true) nex.push_back(make_pair(i, j));
							if (CurrentState.c[i][j] == 0) rems++;
						}
					}
					if (nex.size() == 0) {
						FinalRes.push_back(make_tuple(CurrentState, Next_Move, -1, -1, Data.size()));
						Next_Move = 1; Ti = 0; Consecutive += 1;
					}
					else {
						// 画面表示
						Rect(0, 0, 550, 600).draw(Color(168, 156, 46, 225));
						font80(U"考え中…").draw(115, 130);
						font40(U"しばらくお待ちください").draw(75, 230);
						Rect(95, 325, 360, 60).draw(Color(255, 255, 255));
						Rect(100 + 350 * (Ti - 4) / BACKETS, 330, 350 - 350 * (Ti - 4) / BACKETS, 50).draw(Color(168, 156, 46));
						font30(U"現在").draw(180, 410);
						if (100 * (Ti - 4) / BACKETS <= 9) font30(100 * (Ti - 4) / BACKETS).draw(270, 410);
						else font30(100 * (Ti - 4) / BACKETS).draw(255, 410);
						font30(U"% 完了").draw(300, 410);
						font30(U"探索状態数").draw(150, 455);
						if (TansakuCnt < 10) font30(TansakuCnt).draw(412, 455);
						else if (TansakuCnt < 100) font30(TansakuCnt).draw(394, 455);
						else if (TansakuCnt < 1000) font30(TansakuCnt).draw(376, 455);
						else if (TansakuCnt < 10000) font30(TansakuCnt).draw(358, 455);
						else if (TansakuCnt < 100000) font30(TansakuCnt).draw(340, 455);
						else font30(TansakuCnt).draw(322, 455);

						// モンテカルロ木探索
						Consecutive = 0;
						if (PLAYS < 100000) {
							for (int i = 0; i < abs(PLAYS) / BACKETS; i++) {
								TansakuCnt += 1;
								dfs(0, rems);
							}
						}
						else {
							int ti = clock(), lim = 3;
							if (PLAYS == 200000) lim = 15;
							while (clock() - ti < lim * CLOCKS_PER_SEC / 100) {
								if (StateCnt >= 9500000 * (Ti - 3) / BACKETS) break;
								TansakuCnt += 1;
								dfs(0, rems);
							}
						}
						if (Ti == 3 + BACKETS) {
							int minid_x = -1, minid_y = -1;
							
							if (PLAYS == 0) {
								int idx1 = rand() % nex.size();
								minid_x = nex[idx1].first;
								minid_y = nex[idx1].second;
							}
							if (PLAYS < 0) {
								double minx = -1.0;
								for (int i = 0; i < deg[0]; i++) {
									int idx = nexnum[0] + i;
									double shouritsu = 1.0 * win[idx] / searched[idx];
									if (minx < shouritsu) {
										minx = shouritsu;
										minid_x = (nex_zahyou[0][i] >> 3);
										minid_y = (nex_zahyou[0][i] & 7);
									}
								}
								Win_Rate = minx;
							}
							if (PLAYS > 0) {
								double minx = 2.0;
								for (int i = 0; i < deg[0]; i++) {
									int idx = nexnum[0] + i;
									double shouritsu = 1.0 * win[idx] / searched[idx];
									if (minx > shouritsu) {
										minx = shouritsu;
										minid_x = (nex_zahyou[0][i] >> 3);
										minid_y = (nex_zahyou[0][i] & 7);
									}
								}
								Win_Rate = minx;
							}
							// 勝率補正
							if (abs(PLAYS) < 2500) {
								Win_Rate = get_shouritsu(2, rems);
							}

							FinalRes.push_back(make_tuple(CurrentState, Next_Move, minid_x, minid_y, Data.size()));
							Moves(CurrentState, 2, minid_x, minid_y);
							Next_Move = 1; Ti = 0;
							preX = minid_x; preY = minid_y;
						}
					}
				}
			}
		}

		// [状態 3] リザルト画面
		if (Situation == 3) {
			font80(U"最終結果").draw(240, 0);
			Line(280, 120, 280, 480).draw(4, Color(255, 255, 255));
			Line(760, 120, 760, 480).draw(4, Color(255, 255, 255));
			Line(280, 120, 760, 120).draw(4, Color(255, 255, 255));
			Line(280, 210, 760, 210).draw(LineStyle::SquareDot, 2, Color(255, 255, 255));
			Line(280, 300, 760, 300).draw(LineStyle::SquareDot, 2, Color(255, 255, 255));
			Line(280, 390, 760, 390).draw(LineStyle::SquareDot, 2, Color(255, 255, 255));
			Line(280, 480, 760, 480).draw(4, Color(255, 255, 255));
			Line(328, 480, 328, 488).draw(2, Color(255, 255, 255));
			Line(388, 480, 388, 488).draw(2, Color(255, 255, 255));
			Line(448, 480, 448, 488).draw(2, Color(255, 255, 255));
			Line(508, 480, 508, 488).draw(2, Color(255, 255, 255));
			Line(568, 480, 568, 488).draw(2, Color(255, 255, 255));
			Line(628, 480, 628, 488).draw(2, Color(255, 255, 255));
			Line(688, 480, 688, 488).draw(2, Color(255, 255, 255));
			Line(748, 480, 748, 488).draw(2, Color(255, 255, 255));
			font20(U"75%").draw(230, 195);
			font20(U"50%").draw(230, 285);
			font20(U"25%").draw(230, 375);
			font20(U"5").draw(320, 492);
			font20(U"10").draw(373, 492);
			font20(U"15").draw(433, 492);
			font20(U"20").draw(493, 492);
			font20(U"25").draw(553, 492);
			font20(U"30").draw(613, 492);
			font20(U"35").draw(673, 492);
			font20(U"40").draw(733, 492);
			for (int i = 0; i < min(3 * Three_Elapsed / 5, (int)Data.size() - 1); i++) {
				Line(280 + i * 12, 480.0 - 360.0 * Data[i], 292 + i * 12, 480.0 - 360.0 * Data[i + 1]).draw(2, Color(175, 175, 255));
			}
			for (int i = 0; i < min(3 * Three_Elapsed / 5, (int)Data.size()); i++) {
				if (Data[i] >= 0.75) Circle(280 + i * 12, 480.0 - 360.0 * Data[i], 4).draw(Color(0, 255, 0));
				else if (Data[i] >= 0.25) Circle(280 + i * 12, 480.0 - 360.0 * Data[i], 4).draw(Color(255, 255, 0));
				else Circle(280 + i * 12, 480.0 - 360.0 * Data[i], 4).draw(Color(255, 0, 0));
			}

			Rect(100, 535, 250, 50).draw(Color(255, 255, 0, col1[3]));
			Rect(450, 535, 250, 50).draw(Color(255, 255, 0, col1[5]));
			if (MouseX >= 100.0 && MouseX <= 350.0 && MouseY >= 535.0 && MouseY <= 585.0) col1[3] = min(col1[3] + 13, 255);
			else col1[3] = max(col1[3] - 13, 100);
			if (MouseX >= 450.0 && MouseX <= 700.0 && MouseY >= 535.0 && MouseY <= 585.0) col1[5] = min(col1[5] + 13, 255);
			else col1[5] = max(col1[5] - 13, 100);
			font30(U"詳細分析").draw(165, 540, Color(0, 0, 0));
			font30(U"おわる").draw(530, 540, Color(0, 0, 0));

			if (Scene::Time() - GetLastClick >= 0.1 && MouseL.down()) {
				GetLastClick = Scene::Time();
				if (MouseX >= 100.0 && MouseX <= 350.0 && MouseY >= 535.0 && MouseY <= 585.0) { Situation = 4; IsAnalysis = true; StateCnt = 0; TansakuCnt = 0; Initialize(get<0>(FinalRes[TESUU]), -1, get<1>(FinalRes[TESUU])); }
				if (MouseX >= 450.0 && MouseX <= 700.0 && MouseY >= 535.0 && MouseY <= 585.0) break;
			}

			if (Sente == 1) {
				font20(U"黒番（自分）").draw(40, 150);
				if (Score1 <= 9) font80(Score1).draw(80, 180);
				if (Score1 >= 10) font80(Score1).draw(55, 180);
				font30(U"｜").draw(85, 300);
				if (Score2 <= 9) font80(Score2).draw(80, 355);
				if (Score2 >= 10) font80(Score2).draw(55, 355);
				font20(U"白番（相手）").draw(40, 460);
			}
			if (Sente == 2) {
				font20(U"黒番（相手）").draw(40, 150);
				if (Score2 <= 9) font80(Score2).draw(80, 180);
				if (Score2 >= 10) font80(Score2).draw(55, 180);
				font30(U"｜").draw(85, 300);
				if (Score1 <= 9) font80(Score1).draw(80, 355);
				if (Score1 >= 10) font80(Score1).draw(55, 355);
				font20(U"白番（自分）").draw(40, 460);
			}

			Three_Elapsed += 1;
		}

		// [状態 4] 詳細分析
		if (Situation == 4) {
			font40(U"詳細分析").draw(30, 30);
			Rect(550, 0, 250, 600).draw(Color(51, 0, 0));
			for (int i = 0; i <= 7; i++) {
				for (int j = 0; j <= 7; j++) {
					Rect(55 + i * 55, 110 + j * 55, 55, 55).draw(Color(0, 100, 0));
				}
			}

			int rems = 64;
			for (int i = 0; i <= 8; i++) Line(55 + 55 * i, 110, 55 + 55 * i, 550).draw(Color(255, 255, 255));
			for (int i = 0; i <= 8; i++) Line(55, 110 + 55 * i, 495, 110 + 55 * i).draw(Color(255, 255, 255));
			for (int i = 0; i <= 7; i++) {
				for (int j = 0; j <= 7; j++) {
					if (get<0>(FinalRes[TESUU]).c[i][j] == 0) continue;
					rems--;
					int I = get<0>(FinalRes[TESUU]).c[i][j];
					if (Sente == 2) I = (3 - I);
					if (I == 1) Circle(82 + 55 * i, 137 + 55 * j, 18).draw(Color(0, 0, 0));
					if (I == 2) Circle(82 + 55 * i, 137 + 55 * j, 18).draw(Color(255, 255, 255));
				}
			}
			if (get<2>(FinalRes[TESUU]) != -1 && TESUU + 1 != (int)FinalRes.size()) {
				Circle(82 + 55 * get<2>(FinalRes[TESUU]), 137 + 55 * get<3>(FinalRes[TESUU]), 25).draw(Color(127, 127, 255));
				Circle(82 + 55 * get<2>(FinalRes[TESUU]), 137 + 55 * get<3>(FinalRes[TESUU]), 23).draw(Color(0, 100, 0));
			}
			else if (TESUU + 1 == (int)FinalRes.size()) {
				Rect(120, 220, 310, 160).draw(ColorF(1.0, 1.0, 1.0, 0.6));
				font40(U"ゲーム終了").draw(170, 280, Color(0, 0, 0));
			}
			else {
				Rect(120, 220, 310, 160).draw(ColorF(1.0, 1.0, 1.0, 0.6));
				font40(U"パスする必要").draw(145, 250, Color(0, 0, 0));
				font40(U"があります").draw(170, 310, Color(0, 0, 0));
			}

			if (TESUU < 9) font40(TESUU + 1).draw(590, 20);
			else font40(TESUU + 1).draw(565, 20);
			font20(U"/").draw(615, 40);
			if (FinalRes.size() < 10) font20(FinalRes.size()).draw(639, 40);
			else font20(FinalRes.size()).draw(627, 40);
			if (get<1>(FinalRes[TESUU]) == Sente) font20(U"Steps [黒]").draw(660, 40);
			if (get<1>(FinalRes[TESUU]) != Sente) font20(U"Steps [白]").draw(660, 40);

			for (int i = 0; i < (int)Data.size() - 1; i++) {
				int v1x = 570 + 210 * i / (Data.size() - 1);
				int v2x = 570 + 210 * (i + 1) / (Data.size() - 1);
				int v1y = 180 - 100 * Data[i];
				int v2y = 180 - 100 * Data[i + 1];
				Line(v1x, v1y, v2x, v2y).draw(1, Color(255, 255, 0));
			}
			Line(min(780, (int)(570 + 210 * get<4>(FinalRes[TESUU]) / (Data.size() - 1))), 80, min(780, (int)(570 + 210 * get<4>(FinalRes[TESUU]) / (Data.size() - 1))), 180).draw(1, Color(255, 0, 0));
			Line(569, 79, 781, 79).draw(2, Color(255, 255, 255));
			Line(569, 181, 781, 181).draw(2, Color(255, 255, 255));
			Line(569, 130, 781, 130).draw(LineStyle::SquareDot, 2, Color(255, 255, 255));
			Line(569, 79, 569, 181).draw(2, Color(255, 255, 255));
			Line(781, 79, 781, 181).draw(2, Color(255, 255, 255));

			Rect(560, 500, 50, 40).draw(Color(col1[6], col1[6], col1[6]));
			Rect(620, 500, 50, 40).draw(Color(col1[7], col1[7], col1[7]));
			Rect(680, 500, 50, 40).draw(Color(col1[8], col1[8], col1[8]));
			Rect(740, 500, 50, 40).draw(Color(col1[9], col1[9], col1[9]));
			Rect(560, 550, 230, 40).draw(Color(col1[10], col1[10], col1[10]));
			font20(U"-10").draw(568, 508, Color(0, 0, 0));
			font20(U"-1").draw(633, 508, Color(0, 0, 0));
			font20(U"+1").draw(693, 508, Color(0, 0, 0));
			font20(U"+10").draw(748, 508, Color(0, 0, 0));
			font20(U"結果画面に戻る").draw(600, 558, Color(0, 0, 0));
			if (MouseX >= 560.0 && MouseX <= 610.0 && MouseY >= 500.0 && MouseY <= 540.0) col1[6] = min(col1[6] + 9, 240);
			else col1[6] = max(col1[6] - 9, 100);
			if (MouseX >= 620.0 && MouseX <= 670.0 && MouseY >= 500.0 && MouseY <= 540.0) col1[7] = min(col1[7] + 9, 240);
			else col1[7] = max(col1[7] - 9, 100);
			if (MouseX >= 680.0 && MouseX <= 730.0 && MouseY >= 500.0 && MouseY <= 540.0) col1[8] = min(col1[8] + 9, 240);
			else col1[8] = max(col1[8] - 9, 100);
			if (MouseX >= 740.0 && MouseX <= 790.0 && MouseY >= 500.0 && MouseY <= 540.0) col1[9] = min(col1[9] + 9, 240);
			else col1[9] = max(col1[9] - 9, 100);
			if (MouseX >= 560.0 && MouseX <= 790.0 && MouseY >= 550.0 && MouseY <= 590.0) col1[10] = min(col1[10] + 9, 240);
			else col1[10] = max(col1[10] - 9, 100);

			int ti = clock();
			while (clock() - ti < 1 * CLOCKS_PER_SEC / 100) {
				if (StateCnt >= 9500000) break;
				TansakuCnt += 1;
				dfs(0, rems);
			}

			if (TESUU + 1 == (int)FinalRes.size()) {
				if (Score1 > Score2) Win_Rate = 1.0;
				else if (Score1 == Score2) Win_Rate = 0.5;
				else Win_Rate = 0.0;
			}
			else if (get<1>(FinalRes[TESUU]) != 1) {
				Win_Rate = 2.0;
				for (int i = 0; i < deg[0]; i++) {
					int idx = nexnum[0] + i;
					double shouritsu = 1.0 * win[idx] / searched[idx];
					Win_Rate = min(Win_Rate, shouritsu);
				}
				for (int i = 0; i < deg[0]; i++) {
					int idx = nexnum[0] + i;
					double shouritsu = 1.0 * win[idx] / searched[idx];
					int vx = (nex_zahyou[0][i] >> 3), vy = (nex_zahyou[0][i] & 7), biased = max(1, min(99, (int)(100 * shouritsu + 0.5)));
					if (nex_zahyou[0][i] != -1) {
						int p1 = 255, p2 = 255, p3 = 255; if (abs(Win_Rate - shouritsu) < 1e-6) p3 = 0;
						if (biased < 10) { font20(biased).draw(78 + vx * 55, 125 + vy * 55, Color(p1, p2, p3)); font15(U"%").draw(90 + vx * 55, 130 + vy * 55, Color(p1, p2, p3)); }
						else { font20(biased).draw(66 + vx * 55, 125 + vy * 55, Color(p1, p2, p3)); font15(U"%").draw(90 + vx * 55, 130 + vy * 55, Color(p1, p2, p3)); }
					}
				}
			}
			else {
				Win_Rate = -1.0;
				for (int i = 0; i < deg[0]; i++) {
					int idx = nexnum[0] + i;
					double shouritsu = 1.0 * win[idx] / searched[idx];
					Win_Rate = max(Win_Rate, shouritsu);
				}
				for (int i = 0; i < deg[0]; i++) {
					int idx = nexnum[0] + i;
					double shouritsu = 1.0 * win[idx] / searched[idx];
					int vx = (nex_zahyou[0][i] >> 3), vy = (nex_zahyou[0][i] & 7), biased = max(1, min(99, (int)(100 * shouritsu + 0.5)));
					if (nex_zahyou[0][i] != -1) {
						int p1 = 255, p2 = 255, p3 = 255; if (abs(Win_Rate - shouritsu) < 1e-6) p3 = 0;
						if (biased < 10) { font20(biased).draw(78 + vx * 55, 125 + vy * 55, Color(p1, p2, p3)); font15(U"%").draw(90 + vx * 55, 130 + vy * 55, Color(p1, p2, p3)); }
						else { font20(biased).draw(66 + vx * 55, 125 + vy * 55, Color(p1, p2, p3)); font15(U"%").draw(90 + vx * 55, 130 + vy * 55, Color(p1, p2, p3)); }
					}
				}
			}

			if (BACKETS != -1 && Sente == 1) font20(U"あなた [黒] の勝利可能性").draw(560, 210);
			if (BACKETS != -1 && Sente == 2) font20(U"あなた [白] の勝利可能性").draw(560, 210);
			if (BACKETS == -1) font20(U"先手 [黒] の勝利可能性").draw(560, 210);
			if (Win_Rate >= 0.75) {
				Circle(675, 320, 70).draw(Color(0, 255, 0, 40));
				Circle(675, 320, 70).drawPie(0, ToRadians(max(0.01, min(0.99, Win_Rate)) * 360.0), Color(0, 255, 0));
			}
			else if (Win_Rate >= 0.25) {
				Circle(675, 320, 70).draw(Color(255, 255, 0, 40));
				Circle(675, 320, 70).drawPie(0, ToRadians(max(0.01, min(0.99, Win_Rate)) * 360.0), Color(255, 255, 0));
			}
			else {
				Circle(675, 320, 70).draw(Color(255, 0, 0, 40));
				Circle(675, 320, 70).drawPie(0, ToRadians(max(0.01, min(0.99, Win_Rate)) * 360.0), Color(255, 0, 0));
			}
			Circle(675, 320, 50).draw(Color(51, 0, 0));
			int Fixed_Win_Rate = 100.0 * Win_Rate + 0.5;
			Fixed_Win_Rate = max(1, min(99, Fixed_Win_Rate));
			if (Fixed_Win_Rate <= 9) {
				font40(Fixed_Win_Rate).draw(665, 295);
				font20(U"%").draw(695, 317);
			}
			else {
				font40(Fixed_Win_Rate).draw(640, 295);
				font20(U"%").draw(695, 317);
			}
			font15(U"※探索状態数").draw(610, 410);
			if (TansakuCnt < 10) font15(TansakuCnt).draw(774, 410);
			else if (TansakuCnt < 100) font15(TansakuCnt).draw(765, 410);
			else if (TansakuCnt < 1000) font15(TansakuCnt).draw(756, 410);
			else if (TansakuCnt < 10000) font15(TansakuCnt).draw(747, 410);
			else if (TansakuCnt < 100000) font15(TansakuCnt).draw(738, 410);
			else if (TansakuCnt < 1000000) font15(TansakuCnt).draw(729, 410);
			else if (TansakuCnt < 10000000) font15(TansakuCnt).draw(720, 410);
			else font15(TansakuCnt).draw(711, 410);

			font15(U"※").draw(610, 430);
			font15(U"青丸").draw(628, 430, Color(127, 127, 255));
			font15(U"は実際に置いた手").draw(664, 430);
			font15(U"※").draw(610, 450);
			font15(U"黄色").draw(628, 450, Color(255, 255, 0));
			font15(U"は最善手").draw(664, 450);

			if (Scene::Time() - GetLastClick >= 0.1 && MouseL.down()) {
				GetLastClick = Scene::Time(); bool flag1 = false;
				if (MouseX >= 560.0 && MouseX <= 610.0 && MouseY >= 500.0 && MouseY <= 540.0) { TESUU = max(0, TESUU - 10); flag1 = true; }
				if (MouseX >= 620.0 && MouseX <= 670.0 && MouseY >= 500.0 && MouseY <= 540.0) { TESUU = max(0, TESUU - 1); flag1 = true; }
				if (MouseX >= 680.0 && MouseX <= 730.0 && MouseY >= 500.0 && MouseY <= 540.0) { TESUU = min((int)FinalRes.size() - 1, TESUU + 1); flag1 = true; }
				if (MouseX >= 740.0 && MouseX <= 790.0 && MouseY >= 500.0 && MouseY <= 540.0) { TESUU = min((int)FinalRes.size() - 1, TESUU + 10); flag1 = true; }
				if (MouseX >= 560.0 && MouseX <= 790.0 && MouseY >= 550.0 && MouseY <= 590.0) { Situation = 3; Three_Elapsed = 0; }
				if (flag1 == true) {
					StateCnt = 0;
					TansakuCnt = 0;
					Initialize(get<0>(FinalRes[TESUU]), -1, get<1>(FinalRes[TESUU]));
				}
			}
		}
	}
}